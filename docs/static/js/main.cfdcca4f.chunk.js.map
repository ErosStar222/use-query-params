{"version":3,"sources":["../../../lib/QueryParamProvider.js","../../../lib/updateUrlQuery.js","../../../lib/useQueryParam.js","UseQueryParamExample.tsx","UseQueryParamsExample.tsx","App.tsx","index.tsx","../../../lib/index.js","../../../lib/useQueryParams.js"],"names":["__assign","this","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","defineProperty","exports","value","React","__webpack_require__","adaptReachHistory","history","replace","location","navigate","protocol","host","pathname","search","push","getContextValue","contextValue","window","replaceState","state","pushState","QueryParamProvider","_a","children","ReactRouterRoute","reachHistory","createElement","routeProps","QueryParamContext","Provider","createContext","default","serialize_query_params_1","updateUrlQuery","queryReplacements","updateType","updateInLocation","updateLocation","QueryParamProvider_1","updateUrlQuery_1","useQueryParam","name","paramConfig","rawQuery","StringParam","useContext","useMemo","parse","encodedValue","decode","Array","stringify","useCallback","newValue","newEncodedValue","encode","UseQueryParamExample","_useQueryParam","_useQueryParam2","slicedToArray","foo","setFoo","_useQueryParam3","NumericArrayParam","_useQueryParam4","arr","setArr","prevArr","current","console","log","nextFoo","nanoid","nextArr","Math","round","random","react","className","default_highlight","language","style","atomOneLight","undefined","JSON","onClick","UseQueryParamsExample","_useQueryParams","useQueryParams","_useQueryParams2","query","setQuery","App","props","_React$useState","_React$useState2","example","setExample","href","src_UseQueryParamExample","src_UseQueryParamsExample","ReactDOM","render","react_default","a","BrowserRouter","lib","Route","src_App_0","document","getElementById","m","__export","useQueryParam_1","useQueryParams_1","paramConfigMap","paramNames","keys","paramValues","map","paramName","decodedValues","changes","encodedChanges","encodeQueryParams"],"mappings":"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","file":"static/js/main.cfdcca4f.chunk.js","sourcesContent":["\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n/**\n * Adapts standard DOM window history to work with our\n * { replace, push } interface.\n *\n * @param history Standard history provided by DOM\n */\n\n\nfunction adaptWindowHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.replaceState(location.state, '', location.protocol + \"//\" + location.host + location.pathname + location.search);\n    },\n    push: function push(location) {\n      history.pushState(location.state, '', location.protocol + \"//\" + location.host + location.pathname + location.search);\n    }\n  };\n}\n/**\n * Adapts @reach/router history to work with our\n * { replace, push } interface.\n *\n * @param history globalHistory from @reach/router\n */\n\n\nfunction adaptReachHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.navigate(location.protocol + \"//\" + location.host + location.pathname + location.search, {\n        replace: true\n      });\n    },\n    push: function push(location) {\n      history.navigate(location.protocol + \"//\" + location.host + location.pathname + location.search, {\n        replace: false\n      });\n    }\n  };\n}\n/**\n * Helper to produce the context value falling back to\n * window history and location if not provided.\n */\n\n\nfunction getContextValue(contextValue) {\n  if (contextValue === void 0) {\n    contextValue = {};\n  }\n\n  var value = __assign({}, contextValue);\n\n  var hasWindow = typeof window !== 'undefined';\n\n  if (hasWindow) {\n    if (!value.history) {\n      value.history = adaptWindowHistory(window.history);\n    }\n\n    if (!value.location) {\n      value.location = window.location;\n    }\n  }\n\n  return value;\n}\n\nexports.QueryParamContext = React.createContext(getContextValue());\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\n\nfunction QueryParamProvider(_a) {\n  var children = _a.children,\n      ReactRouterRoute = _a.ReactRouterRoute,\n      reachHistory = _a.reachHistory,\n      history = _a.history,\n      location = _a.location; // if we have React Router, use it to get the context value\n\n  if (ReactRouterRoute) {\n    return React.createElement(ReactRouterRoute, null, function (routeProps) {\n      return React.createElement(exports.QueryParamContext.Provider, {\n        value: getContextValue(routeProps)\n      }, children);\n    });\n  } // if we are using reach router, use its history\n\n\n  if (reachHistory) {\n    return React.createElement(exports.QueryParamContext.Provider, {\n      value: getContextValue({\n        history: adaptReachHistory(reachHistory),\n        location: location\n      })\n    }, children);\n  } // neither reach nor react-router, so allow manual overrides\n\n\n  return React.createElement(exports.QueryParamContext.Provider, {\n    value: getContextValue({\n      history: history,\n      location: location\n    })\n  }, children);\n}\n\nexports.QueryParamProvider = QueryParamProvider;\nexports.default = QueryParamProvider;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar serialize_query_params_1 = require(\"serialize-query-params\");\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\n\n\nfunction updateUrlQuery(queryReplacements, location, history, updateType) {\n  if (updateType === void 0) {\n    updateType = 'replaceIn';\n  }\n\n  switch (updateType) {\n    case 'replaceIn':\n      history.replace(serialize_query_params_1.updateInLocation(queryReplacements, location));\n      break;\n\n    case 'pushIn':\n      history.push(serialize_query_params_1.updateInLocation(queryReplacements, location));\n      break;\n\n    case 'replace':\n      history.replace(serialize_query_params_1.updateLocation(queryReplacements, location));\n      break;\n\n    case 'push':\n      history.push(serialize_query_params_1.updateLocation(queryReplacements, location));\n      break;\n\n    default:\n  }\n}\n\nexports.updateUrlQuery = updateUrlQuery;\nexports.default = updateUrlQuery;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar serialize_query_params_1 = require(\"serialize-query-params\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'replaceIn'.\n *\n * You may optionally pass in a rawQuery object, otherwise the query is derived\n * from the location available in the QueryParamContext.\n *\n * D = decoded type\n * D2 = return value from decode (typically same as D)\n */\n\n\nexports.useQueryParam = function (name, paramConfig, rawQuery) {\n  if (paramConfig === void 0) {\n    paramConfig = serialize_query_params_1.StringParam;\n  }\n\n  var _a = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _a.history,\n      location = _a.location; // read in the raw query\n\n\n  if (!rawQuery) {\n    rawQuery = React.useMemo(function () {\n      return serialize_query_params_1.parse(location.search) || {};\n    }, [location.search]);\n  } // read in the encoded string value\n\n\n  var encodedValue = rawQuery[name]; // decode if the encoded value has changed, otherwise\n  // re-use memoized value\n\n  var decodedValue = React.useMemo(function () {\n    if (encodedValue == null) {\n      return undefined;\n    }\n\n    return paramConfig.decode(encodedValue); // note that we use the stringified encoded value since the encoded\n    // value may be an array that is recreated if a different query param\n    // changes.\n  }, [encodedValue instanceof Array ? serialize_query_params_1.stringify({\n    name: encodedValue\n  }) : encodedValue]); // create the setter, memoizing via useCallback\n\n  var setValue = React.useCallback(function (newValue, updateType) {\n    var _a;\n\n    var newEncodedValue = paramConfig.encode(newValue);\n    updateUrlQuery_1.updateUrlQuery((_a = {}, _a[name] = newEncodedValue, _a), location, history, updateType);\n  }, [location]);\n  return [decodedValue, setValue];\n};","import * as React from 'react';\nimport {\n  useQueryParam,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamExample = () => {\n  const [foo, setFoo] = useQueryParam('foo', StringParam);\n  const [arr, setArr] = useQueryParam('arr', NumericArrayParam);\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamExample\">\n      <h2 className=\"text-center\">useQueryParam Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [foo, setFoo] = useQueryParam('foo', StringParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button className=\"set-btn\" onClick={() => setFoo(nextFoo)}>\n            setFoo({JSON.stringify(nextFoo)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [arr, setArr] = useQueryParam('arr', NumericArrayParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'push')}>\n            setArr({JSON.stringify(nextArr)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'pushIn')}>\n            setArr({JSON.stringify(nextArr)}, 'pushIn')\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamExample;\n","import * as React from 'react';\nimport {\n  useQueryParams,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamsExample = () => {\n  const [query, setQuery] = useQueryParams({\n    foo: StringParam,\n    arr: NumericArrayParam,\n  });\n  const { foo, arr } = query;\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamsExample\">\n      <h2 className=\"text-center\">useQueryParams Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          {`const [query, setQuery] = useQueryParams({\n  foo: StringParam,\n  arr: NumericArrayParam,\n});\nconst { foo, arr } = query;`}\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'push')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'pushIn')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'pushIn')\n          </button>\n          <p>\n            With <code>setQuery</code>, we can update multiple parameters at\n            once.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr, foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ arr: nextArr, foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamsExample;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport UseQueryParamExample from './UseQueryParamExample';\nimport UseQueryParamsExample from './UseQueryParamsExample';\nimport './App.css';\n\nconst App = (props: any) => {\n  const [example, setExample] = React.useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"text-center\">\n        <h1>useQueryParams</h1>\n        <div className=\"ext-nav\">\n          <a href=\"https://github.com/pbeshai/use-query-params\">GitHub</a>\n        </div>\n        <div className=\"nav\">\n          <button\n            className={example === 0 ? 'active' : undefined}\n            onClick={() => setExample(0)}\n          >\n            useQueryParam\n          </button>\n          <button\n            className={example === 1 ? 'active' : undefined}\n            onClick={() => setExample(1)}\n          >\n            useQueryParams\n          </button>\n        </div>\n      </header>\n      <div>\n        {example === 0 && <UseQueryParamExample />}\n        {example === 1 && <UseQueryParamsExample />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"serialize-query-params\"));\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nexports.useQueryParam = useQueryParam_1.useQueryParam;\n\nvar useQueryParams_1 = require(\"./useQueryParams\");\n\nexports.useQueryParams = useQueryParams_1.useQueryParams;\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n\nexports.updateUrlQuery = updateUrlQuery_1.updateUrlQuery;\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nexports.QueryParamProvider = QueryParamProvider_1.QueryParamProvider;\nexports.QueryParamContext = QueryParamProvider_1.QueryParamContext;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar serialize_query_params_1 = require(\"serialize-query-params\");\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\n\n\nexports.useQueryParams = function (paramConfigMap) {\n  var _a = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _a.history,\n      location = _a.location; // read in the raw query\n\n\n  var rawQuery = React.useMemo(function () {\n    return serialize_query_params_1.parse(location.search) || {};\n  }, [location.search]); // parse each parameter via useQueryParam\n  // we reuse the logic to not recreate objects\n\n  var paramNames = Object.keys(paramConfigMap);\n  var paramValues = paramNames.map(function (paramName) {\n    return useQueryParam_1.useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n  }); // we use a memo here to prevent recreating the containing decodedValues object\n  // which would break === comparisons even if no values changed.\n\n  var decodedValues = React.useMemo(function () {\n    // iterate over the decoded values and build an object\n    var decodedValues = {};\n\n    for (var i = 0; i < paramNames.length; ++i) {\n      decodedValues[paramNames[i]] = paramValues[i];\n    }\n\n    return decodedValues;\n  }, paramValues); // create a setter for updating multiple query params at once\n\n  var setQuery = React.useCallback(function (changes, updateType) {\n    // encode as strings for the URL\n    var encodedChanges = serialize_query_params_1.encodeQueryParams(paramConfigMap, changes); // update the URL\n\n    updateUrlQuery_1.default(encodedChanges, location, history, updateType);\n  }, [location]); // no longer Partial\n\n  return [decodedValues, setQuery];\n};\n\nexports.default = exports.useQueryParams;"],"sourceRoot":""}