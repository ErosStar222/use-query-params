{"version":3,"sources":["../../../lib/QueryParamProvider.js","../../../lib/updateUrlQuery.js","../../../../serialize-query-params/lib/serialize.js","../../../lib/useQueryParam.js","UseQueryParamExample.tsx","UseQueryParamsExample.tsx","App.tsx","index.tsx","../../../lib/index.js","../../../../serialize-query-params/lib/params.js","../../../../serialize-query-params/lib/updateLocation.js","../../../../serialize-query-params/lib/encodeQueryParams.js","../../../../serialize-query-params/lib/decodeQueryParams.js","../../../lib/useQueryParams.js","../../../../serialize-query-params/lib/index.js"],"names":["Object","defineProperty","exports","value","React","__webpack_require__","adaptReachHistory","history","replace","location","navigate","concat","protocol","host","pathname","search","push","getContextValue","contextValue","arguments","length","undefined","assign","window","replaceState","state","pushState","QueryParamProvider","_ref","children","ReactRouterRoute","reachHistory","createElement","routeProps","QueryParamContext","Provider","createContext","default","serialize_query_params_1","updateUrlQuery","queryReplacements","updateInLocation","updateLocation","_slicedToArray","_construct","_toConsumableArray","decodeNumber","input","numStr","Array","result","isNaN","decodeArray","map","item","filter","encodeDelimitedArray","array","entrySeparator","join","decodeDelimitedArray","arrayStr","split","encodeObject","obj","keyValSeparator","keys","key","decodeObject","objStr","forEach","entryStr","_entryStr$split","_entryStr$split2","encodeDate","date","year","getFullYear","month","getMonth","day","getDate","decodeDate","dateString","parts","decoded","Date","getTime","encodeBoolean","bool","decodeBoolean","boolStr","encodeNumber","num","String","encodeString","str","decodeString","encodeJson","any","JSON","stringify","decodeJson","jsonStr","parse","e","encodeArray","encodeNumericArray","d","decodeNumericArray","arr","encodeDelimitedNumericArray","decodeDelimitedNumericArray","encodeNumericObject","decodeNumericObject","_defineProperty","QueryParamProvider_1","updateUrlQuery_1","useQueryParam","name","paramConfig","StringParam","rawQuery","_React$useContext","useContext","useMemo","encodedValue","decode","useCallback","newValue","updateType","newEncodedValue","encode","UseQueryParamExample","_useQueryParam","_useQueryParam2","slicedToArray","foo","setFoo","_useQueryParam3","NumericArrayParam","_useQueryParam4","setArr","prevArr","current","console","log","nextFoo","nanoid","nextArr","Math","round","random","react","className","default_highlight","language","style","atomOneLight","onClick","UseQueryParamsExample","_useQueryParams","useQueryParams","_useQueryParams2","query","setQuery","App","props","_React$useState","_React$useState2","example","setExample","href","src_UseQueryParamExample","src_UseQueryParamsExample","ReactDOM","render","react_default","a","BrowserRouter","lib","Route","src_App_0","document","getElementById","m","p","hasOwnProperty","__export","useQueryParam_1","useQueryParams_1","Serialize","NumberParam","ObjectParam","ArrayParam","JsonParam","DateParam","BooleanParam","NumericObjectParam","DelimitedArrayParam","DelimitedNumericArrayParam","query_string_1","filterNully","reduce","queryAccumulator","queryParam","encodedQuery","encodedSearchString","now","encodedQueryReplacements","currQuery","encodeQueryParams","paramConfigMap","paramNames","_i","paramName","decodedValue","decodeQueryParams","decodedQuery","decodedValues","changes","encodedChanges","serialize_1","params_1","updateLocation_1","encodeQueryParams_1","decodeQueryParams_1","parseUrl","extract"],"mappings":"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","file":"static/js/main.15e01644.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n/**\n * Adapts standard DOM window history to work with our\n * { replace, push } interface.\n *\n * @param history Standard history provided by DOM\n */\n\n\nfunction adaptWindowHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.replaceState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    },\n    push: function push(location) {\n      history.pushState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    }\n  };\n}\n/**\n * Adapts @reach/router history to work with our\n * { replace, push } interface.\n *\n * @param history globalHistory from @reach/router\n */\n\n\nfunction adaptReachHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: true\n      });\n    },\n    push: function push(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: false\n      });\n    }\n  };\n}\n/**\n * Helper to produce the context value falling back to\n * window history and location if not provided.\n */\n\n\nfunction getContextValue() {\n  var contextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var value = Object.assign({}, contextValue);\n  var hasWindow = typeof window !== 'undefined';\n\n  if (hasWindow) {\n    if (!value.history) {\n      value.history = adaptWindowHistory(window.history);\n    }\n\n    if (!value.location) {\n      value.location = window.location;\n    }\n  }\n\n  return value;\n}\n\nexports.QueryParamContext = React.createContext(getContextValue());\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\n\nfunction QueryParamProvider(_ref) {\n  var children = _ref.children,\n      ReactRouterRoute = _ref.ReactRouterRoute,\n      reachHistory = _ref.reachHistory,\n      history = _ref.history,\n      location = _ref.location;\n\n  // if we have React Router, use it to get the context value\n  if (ReactRouterRoute) {\n    return React.createElement(ReactRouterRoute, null, function (routeProps) {\n      return React.createElement(exports.QueryParamContext.Provider, {\n        value: getContextValue(routeProps)\n      }, children);\n    });\n  } // if we are using reach router, use its history\n\n\n  if (reachHistory) {\n    return React.createElement(exports.QueryParamContext.Provider, {\n      value: getContextValue({\n        history: adaptReachHistory(reachHistory),\n        location: location\n      })\n    }, children);\n  } // neither reach nor react-router, so allow manual overrides\n\n\n  return React.createElement(exports.QueryParamContext.Provider, {\n    value: getContextValue({\n      history: history,\n      location: location\n    })\n  }, children);\n}\n\nexports.QueryParamProvider = QueryParamProvider;\nexports.default = QueryParamProvider;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar serialize_query_params_1 = require(\"serialize-query-params\");\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\n\n\nfunction updateUrlQuery(queryReplacements, location, history) {\n  var updateType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'replaceIn';\n\n  switch (updateType) {\n    case 'replaceIn':\n      history.replace(serialize_query_params_1.updateInLocation(queryReplacements, location));\n      break;\n\n    case 'pushIn':\n      history.push(serialize_query_params_1.updateInLocation(queryReplacements, location));\n      break;\n\n    case 'replace':\n      history.replace(serialize_query_params_1.updateLocation(queryReplacements, location));\n      break;\n\n    case 'push':\n      history.push(serialize_query_params_1.updateLocation(queryReplacements, location));\n      break;\n\n    default:\n  }\n}\n\nexports.updateUrlQuery = updateUrlQuery;\nexports.default = updateUrlQuery;","\"use strict\";\n\nvar _slicedToArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _construct = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\n\nfunction encodeDate(date) {\n  if (date == null) {\n    return undefined;\n  }\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return \"\".concat(year, \"-\").concat(month < 10 ? \"0\".concat(month) : month, \"-\").concat(day < 10 ? \"0\".concat(day) : day);\n}\n\nexports.encodeDate = encodeDate;\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\n\nfunction decodeDate(input) {\n  if (input == null || !input.length) {\n    return undefined;\n  }\n\n  var dateString = input instanceof Array ? input[0] : input;\n\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n\n  var parts = dateString.split('-'); // may only be a year so won't even have a month\n\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n\n  var decoded = _construct(Date, _toConsumableArray(parts));\n\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n\n  return decoded;\n}\n\nexports.decodeDate = decodeDate;\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\n\nfunction encodeBoolean(bool) {\n  if (bool === undefined) {\n    return undefined;\n  }\n\n  return bool ? '1' : '0';\n}\n\nexports.encodeBoolean = encodeBoolean;\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\n\nfunction decodeBoolean(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var boolStr = input instanceof Array ? input[0] : input;\n\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n\n  return undefined;\n}\n\nexports.decodeBoolean = decodeBoolean;\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\n\nfunction encodeNumber(num) {\n  if (num == null) {\n    return undefined;\n  }\n\n  return String(num);\n}\n\nexports.encodeNumber = encodeNumber;\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\n\nfunction decodeNumber(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var numStr = input instanceof Array ? input[0] : input;\n\n  if (numStr == null || numStr === '') {\n    return undefined;\n  }\n\n  var result = +numStr;\n\n  if (isNaN(result)) {\n    return undefined;\n  }\n\n  return result;\n}\n\nexports.decodeNumber = decodeNumber;\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\n\nfunction encodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.encodeString = encodeString;\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\n\nfunction decodeString(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var str = input instanceof Array ? input[0] : input;\n\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.decodeString = decodeString;\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\n\nfunction encodeJson(any) {\n  if (any == null) {\n    return undefined;\n  }\n\n  return JSON.stringify(any);\n}\n\nexports.encodeJson = encodeJson;\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\n\nfunction decodeJson(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var jsonStr = input instanceof Array ? input[0] : input;\n\n  if (!jsonStr) {\n    return undefined;\n  }\n\n  var result;\n\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n\n  return result;\n}\n\nexports.decodeJson = decodeJson;\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nfunction encodeArray(array) {\n  if (!array) {\n    return undefined;\n  }\n\n  return array;\n}\n\nexports.encodeArray = encodeArray;\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nfunction decodeArray(input) {\n  if (!input) {\n    return undefined;\n  }\n\n  if (!(input instanceof Array)) {\n    return [input];\n  }\n\n  return input.map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n\nexports.decodeArray = decodeArray;\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nfunction encodeNumericArray(array) {\n  if (!array) {\n    return undefined;\n  }\n\n  return array.map(function (d) {\n    return \"\".concat(d);\n  });\n}\n\nexports.encodeNumericArray = encodeNumericArray;\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nfunction decodeNumericArray(input) {\n  var arr = decodeArray(input);\n\n  if (!arr) {\n    return undefined;\n  }\n\n  return arr.map(function (item) {\n    return +item;\n  }).filter(function (item) {\n    return item !== undefined && !isNaN(item);\n  });\n}\n\nexports.decodeNumericArray = decodeNumericArray;\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\n\nfunction encodeDelimitedArray(array) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (!array) {\n    return undefined;\n  }\n\n  return array.join(entrySeparator);\n}\n\nexports.encodeDelimitedArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\n\nfunction decodeDelimitedArray(input) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (input == null) {\n    return undefined;\n  }\n\n  var arrayStr = input instanceof Array ? input[0] : input;\n\n  if (!arrayStr) {\n    return undefined;\n  }\n\n  return arrayStr.split(entrySeparator).map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n\nexports.decodeDelimitedArray = decodeDelimitedArray;\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nexports.encodeDelimitedNumericArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nfunction decodeDelimitedNumericArray(arrayStr) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n  var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  }\n\n  return decoded.map(function (d) {\n    return d == null ? undefined : +d;\n  }).filter(function (d) {\n    return d !== undefined && !isNaN(d);\n  });\n}\n\nexports.decodeDelimitedNumericArray = decodeDelimitedNumericArray;\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nfunction encodeObject(obj) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (!obj || !Object.keys(obj).length) {\n    return undefined;\n  }\n\n  return Object.keys(obj).map(function (key) {\n    return \"\".concat(key).concat(keyValSeparator).concat(obj[key]);\n  }).join(entrySeparator);\n}\n\nexports.encodeObject = encodeObject;\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeObject(input) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (input == null) {\n    return undefined;\n  }\n\n  var objStr = input instanceof Array ? input[0] : input;\n\n  if (!objStr || !objStr.length) {\n    return undefined;\n  }\n\n  var obj = {};\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _entryStr$split = entryStr.split(keyValSeparator),\n        _entryStr$split2 = _slicedToArray(_entryStr$split, 2),\n        key = _entryStr$split2[0],\n        value = _entryStr$split2[1];\n\n    obj[key] = value === '' ? undefined : value;\n  });\n  return obj;\n}\n\nexports.decodeObject = decodeObject;\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexports.encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeNumericObject(input) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n  var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  } // convert to numbers\n\n\n  Object.keys(decoded).forEach(function (key) {\n    if (decoded[key] !== undefined) {\n      decoded[key] = decodeNumber(decoded[key]);\n    }\n  });\n  return decoded;\n}\n\nexports.decodeNumericObject = decodeNumericObject;","\"use strict\";\n\nvar _defineProperty = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar serialize_query_params_1 = require(\"serialize-query-params\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'replaceIn'.\n *\n * You may optionally pass in a rawQuery object, otherwise the query is derived\n * from the location available in the QueryParamContext.\n *\n * D = decoded type\n * D2 = return value from decode (typically same as D)\n */\n\n\nexports.useQueryParam = function (name) {\n  var paramConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : serialize_query_params_1.StringParam;\n  var rawQuery = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  if (!rawQuery) {\n    rawQuery = React.useMemo(function () {\n      return serialize_query_params_1.parse(location.search) || {};\n    }, [location.search]);\n  } // read in the encoded string value\n\n\n  var encodedValue = rawQuery[name]; // decode if the encoded value has changed, otherwise\n  // re-use memoized value\n\n  var decodedValue = React.useMemo(function () {\n    if (encodedValue == null) {\n      return undefined;\n    }\n\n    return paramConfig.decode(encodedValue); // note that we use the stringified encoded value since the encoded\n    // value may be an array that is recreated if a different query param\n    // changes.\n  }, [encodedValue instanceof Array ? serialize_query_params_1.stringify({\n    name: encodedValue\n  }) : encodedValue]); // create the setter, memoizing via useCallback\n\n  var setValue = React.useCallback(function (newValue, updateType) {\n    var newEncodedValue = paramConfig.encode(newValue);\n    updateUrlQuery_1.updateUrlQuery(_defineProperty({}, name, newEncodedValue), location, history, updateType);\n  }, [location]);\n  return [decodedValue, setValue];\n};","import * as React from 'react';\nimport {\n  useQueryParam,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamExample = () => {\n  const [foo, setFoo] = useQueryParam('foo', StringParam);\n  const [arr, setArr] = useQueryParam('arr', NumericArrayParam);\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamExample\">\n      <h2 className=\"text-center\">useQueryParam Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [foo, setFoo] = useQueryParam('foo', StringParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button className=\"set-btn\" onClick={() => setFoo(nextFoo)}>\n            setFoo({JSON.stringify(nextFoo)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [arr, setArr] = useQueryParam('arr', NumericArrayParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'push')}>\n            setArr({JSON.stringify(nextArr)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'pushIn')}>\n            setArr({JSON.stringify(nextArr)}, 'pushIn')\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamExample;\n","import * as React from 'react';\nimport {\n  useQueryParams,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamsExample = () => {\n  const [query, setQuery] = useQueryParams({\n    foo: StringParam,\n    arr: NumericArrayParam,\n  });\n  const { foo, arr } = query;\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamsExample\">\n      <h2 className=\"text-center\">useQueryParams Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          {`const [query, setQuery] = useQueryParams({\n  foo: StringParam,\n  arr: NumericArrayParam,\n});\nconst { foo, arr } = query;`}\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'push')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'pushIn')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'pushIn')\n          </button>\n          <p>\n            With <code>setQuery</code>, we can update multiple parameters at\n            once.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr, foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ arr: nextArr, foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamsExample;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport UseQueryParamExample from './UseQueryParamExample';\nimport UseQueryParamsExample from './UseQueryParamsExample';\nimport './App.css';\n\nconst App = (props: any) => {\n  const [example, setExample] = React.useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"text-center\">\n        <h1>useQueryParams</h1>\n        <div className=\"ext-nav\">\n          <a href=\"https://github.com/pbeshai/use-query-params\">GitHub</a>\n        </div>\n        <div className=\"nav\">\n          <button\n            className={example === 0 ? 'active' : undefined}\n            onClick={() => setExample(0)}\n          >\n            useQueryParam\n          </button>\n          <button\n            className={example === 1 ? 'active' : undefined}\n            onClick={() => setExample(1)}\n          >\n            useQueryParams\n          </button>\n        </div>\n      </header>\n      <div>\n        {example === 0 && <UseQueryParamExample />}\n        {example === 1 && <UseQueryParamsExample />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"serialize-query-params\"));\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nexports.useQueryParam = useQueryParam_1.useQueryParam;\n\nvar useQueryParams_1 = require(\"./useQueryParams\");\n\nexports.useQueryParams = useQueryParams_1.useQueryParams;\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n\nexports.updateUrlQuery = updateUrlQuery_1.updateUrlQuery;\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nexports.QueryParamProvider = QueryParamProvider_1.QueryParamProvider;\nexports.QueryParamContext = QueryParamProvider_1.QueryParamContext;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Serialize = require(\"./serialize\");\n/**\n * String values\n */\n\n\nexports.StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\n/**\n * Numbers (integers or floats)\n */\n\nexports.NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\n/**\n * For flat objects where values are strings\n */\n\nexports.ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\n\nexports.JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\n\nexports.DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\n\nexports.BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\n/**\n * For flat objects where the values are numbers\n */\n\nexports.NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.DelimitedArrayParam = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\n\nexports.DelimitedNumericArrayParam = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_string_1 = require(\"query-string\");\n/**\n * remove query params that are nully or an empty strings.\n * note: these values are assumed to be already encoded as strings.\n */\n\n\nfunction filterNully(query) {\n  var filteredQuery = Object.keys(query).reduce(function (queryAccumulator, queryParam) {\n    // get encoded value for this param\n    var encodedValue = query[queryParam]; // if it isn't null or empty string, add it to the accumulated obj\n\n    if (encodedValue != null && encodedValue !== '') {\n      queryAccumulator[queryParam] = encodedValue;\n    }\n\n    return queryAccumulator;\n  }, {});\n  return filteredQuery;\n}\n/**\n * Update a location, wiping out parameters not included in encodedQuery\n */\n\n\nfunction updateLocation(encodedQuery, location) {\n  var encodedSearchString = query_string_1.stringify(filterNully(encodedQuery));\n  var newLocation = Object.assign({}, location, {\n    key: \"\".concat(Date.now()),\n    search: encodedSearchString.length ? \"?\".concat(encodedSearchString) : ''\n  });\n  return newLocation;\n}\n\nexports.updateLocation = updateLocation;\n/**\n * Update a location while retaining existing parameters\n */\n\nfunction updateInLocation(encodedQueryReplacements, location) {\n  // if a query is there, use it, otherwise parse the search string\n  var currQuery = location.query || query_string_1.parse(location.search);\n  var newQuery = Object.assign({}, currQuery, encodedQueryReplacements);\n  return updateLocation(filterNully(newQuery), location);\n}\n\nexports.updateInLocation = updateInLocation;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\n\nfunction encodeQueryParams(paramConfigMap, query) {\n  var encodedQuery = {};\n  var paramNames = Object.keys(query);\n\n  for (var _i = 0; _i < paramNames.length; _i++) {\n    var paramName = paramNames[_i];\n    var decodedValue = query[paramName];\n\n    if (decodedValue == null) {\n      encodedQuery[paramName] = undefined;\n      continue;\n    }\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Encoding parameter \".concat(paramName, \" as string since it was not configured.\"));\n      } // NOTE: we could just not encode it, but it is probably convenient to have\n      // it be included by default as a string type.\n\n\n      encodedQuery[paramName] = String(decodedValue);\n    } else {\n      encodedQuery[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n    }\n  }\n\n  return encodedQuery;\n}\n\nexports.encodeQueryParams = encodeQueryParams;\nexports.default = encodeQueryParams;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\n\nfunction decodeQueryParams(paramConfigMap, encodedQuery) {\n  var decodedQuery = {};\n  var paramNames = Object.keys(encodedQuery);\n\n  for (var _i = 0; _i < paramNames.length; _i++) {\n    var paramName = paramNames[_i];\n    var encodedValue = encodedQuery[paramName];\n\n    if (encodedValue == null) {\n      decodedQuery[paramName] = undefined;\n      continue;\n    }\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Passing through parameter \".concat(paramName, \" during decoding since it was not configured.\"));\n      } // NOTE: we could just not include it, but it is probably convenient to have\n      // it default to be a string type.\n\n\n      decodedQuery[paramName] = encodedValue;\n    } else {\n      decodedQuery[paramName] = paramConfigMap[paramName].decode(encodedValue);\n    }\n  }\n\n  return decodedQuery;\n}\n\nexports.decodeQueryParams = decodeQueryParams;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar serialize_query_params_1 = require(\"serialize-query-params\");\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\n\n\nexports.useQueryParams = function (paramConfigMap) {\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  var rawQuery = React.useMemo(function () {\n    return serialize_query_params_1.parse(location.search) || {};\n  }, [location.search]); // parse each parameter via usQueryParam\n\n  var paramNames = Object.keys(paramConfigMap);\n  var decodedValues = {};\n\n  for (var _i = 0; _i < paramNames.length; _i++) {\n    var paramName = paramNames[_i];\n    decodedValues[paramName] = useQueryParam_1.useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n  } // create a setter for updating multiple query params at once\n\n\n  var setQuery = React.useCallback(function (changes, updateType) {\n    // encode as strings for the URL\n    var encodedChanges = serialize_query_params_1.encodeQueryParams(paramConfigMap, changes); // update the URL\n\n    updateUrlQuery_1.default(encodedChanges, location, history, updateType);\n  }, [location]); // no longer Partial\n\n  return [decodedValues, setQuery];\n};\n\nexports.default = exports.useQueryParams;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar serialize_1 = require(\"./serialize\");\n\nexports.encodeDate = serialize_1.encodeDate;\nexports.decodeDate = serialize_1.decodeDate;\nexports.encodeBoolean = serialize_1.encodeBoolean;\nexports.decodeBoolean = serialize_1.decodeBoolean;\nexports.encodeNumber = serialize_1.encodeNumber;\nexports.decodeNumber = serialize_1.decodeNumber;\nexports.encodeString = serialize_1.encodeString;\nexports.decodeString = serialize_1.decodeString;\nexports.encodeJson = serialize_1.encodeJson;\nexports.decodeJson = serialize_1.decodeJson;\nexports.encodeArray = serialize_1.encodeArray;\nexports.decodeArray = serialize_1.decodeArray;\nexports.encodeNumericArray = serialize_1.encodeNumericArray;\nexports.decodeNumericArray = serialize_1.decodeNumericArray;\nexports.encodeDelimitedArray = serialize_1.encodeDelimitedArray;\nexports.decodeDelimitedArray = serialize_1.decodeDelimitedArray;\nexports.encodeDelimitedNumericArray = serialize_1.encodeDelimitedNumericArray;\nexports.decodeDelimitedNumericArray = serialize_1.decodeDelimitedNumericArray;\nexports.encodeObject = serialize_1.encodeObject;\nexports.decodeObject = serialize_1.decodeObject;\nexports.encodeNumericObject = serialize_1.encodeNumericObject;\nexports.decodeNumericObject = serialize_1.decodeNumericObject;\n\nvar params_1 = require(\"./params\");\n\nexports.StringParam = params_1.StringParam;\nexports.NumberParam = params_1.NumberParam;\nexports.ObjectParam = params_1.ObjectParam;\nexports.ArrayParam = params_1.ArrayParam;\nexports.NumericArrayParam = params_1.NumericArrayParam;\nexports.JsonParam = params_1.JsonParam;\nexports.DateParam = params_1.DateParam;\nexports.BooleanParam = params_1.BooleanParam;\nexports.NumericObjectParam = params_1.NumericObjectParam;\nexports.DelimitedArrayParam = params_1.DelimitedArrayParam;\nexports.DelimitedNumericArrayParam = params_1.DelimitedNumericArrayParam;\n\nvar updateLocation_1 = require(\"./updateLocation\");\n\nexports.updateLocation = updateLocation_1.updateLocation;\nexports.updateInLocation = updateLocation_1.updateInLocation;\n\nvar encodeQueryParams_1 = require(\"./encodeQueryParams\");\n\nexports.encodeQueryParams = encodeQueryParams_1.encodeQueryParams;\n\nvar decodeQueryParams_1 = require(\"./decodeQueryParams\");\n\nexports.decodeQueryParams = decodeQueryParams_1.decodeQueryParams; // for convenience\n\nvar query_string_1 = require(\"query-string\");\n\nexports.stringify = query_string_1.stringify;\nexports.parse = query_string_1.parse;\nexports.parseUrl = query_string_1.parseUrl;\nexports.extract = query_string_1.extract;"],"sourceRoot":""}