{"version":3,"sources":["../../../esm/QueryParamProvider.js","../../../esm/updateUrlQuery.js","../../../esm/useQueryParam.js","../../../esm/useQueryParams.js","../../../esm/withQueryParams.js","UseQueryParamExample.tsx","UseQueryParamsExample.tsx","App.tsx","index.tsx"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","adaptReachHistory","history","replace","location","navigate","protocol","host","pathname","search","push","getContextValue","contextValue","value","window","replaceState","state","pushState","QueryParamContext","react","QueryParamProvider","_a","children","ReactRouterRoute","reachHistory","routeProps","Provider","updateUrlQuery","queryReplacements","updateType","esm","esm_updateUrlQuery","useQueryParam_useQueryParam","name","paramConfig","rawQuery","query","encodedValue","decode","Array","newValue","newEncodedValue","encode","useQueryParams_useQueryParams","paramConfigMap","paramNames","keys","paramValues","map","paramName","decodedValues","changes","encodedChanges","UseQueryParamExample","_useQueryParam","useQueryParam","StringParam","_useQueryParam2","slicedToArray","foo","setFoo","_useQueryParam3","NumericArrayParam","_useQueryParam4","arr","setArr","prevArr","React","current","console","log","nextFoo","nanoid","nextArr","Math","round","random","className","default_highlight","language","style","atomOneLight","undefined","JSON","stringify","onClick","UseQueryParamsExample","_useQueryParams","useQueryParams","_useQueryParams2","setQuery","App","props","_React$useState","_React$useState2","example","setExample","href","src_UseQueryParamExample","src_UseQueryParamsExample","ReactDOM","render","react_default","a","createElement","BrowserRouter","Route","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.1b1d17b0.chunk.js","sourcesContent":["var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\n/**\n * Adapts standard DOM window history to work with our\n * { replace, push } interface.\n *\n * @param history Standard history provided by DOM\n */\n\nfunction adaptWindowHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.replaceState(location.state, '', location.protocol + \"//\" + location.host + location.pathname + location.search);\n    },\n    push: function push(location) {\n      history.pushState(location.state, '', location.protocol + \"//\" + location.host + location.pathname + location.search);\n    }\n  };\n}\n/**\n * Adapts @reach/router history to work with our\n * { replace, push } interface.\n *\n * @param history globalHistory from @reach/router\n */\n\n\nfunction adaptReachHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.navigate(location.protocol + \"//\" + location.host + location.pathname + location.search, {\n        replace: true\n      });\n    },\n    push: function push(location) {\n      history.navigate(location.protocol + \"//\" + location.host + location.pathname + location.search, {\n        replace: false\n      });\n    }\n  };\n}\n/**\n * Helper to produce the context value falling back to\n * window history and location if not provided.\n */\n\n\nfunction getContextValue(contextValue) {\n  if (contextValue === void 0) {\n    contextValue = {};\n  }\n\n  var value = __assign({}, contextValue);\n\n  var hasWindow = typeof window !== 'undefined';\n\n  if (hasWindow) {\n    if (!value.history) {\n      value.history = adaptWindowHistory(window.history);\n    }\n\n    if (!value.location) {\n      value.location = window.location;\n    }\n  }\n\n  return value;\n}\n\nexport var QueryParamContext = React.createContext(getContextValue());\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\n\nexport function QueryParamProvider(_a) {\n  var children = _a.children,\n      ReactRouterRoute = _a.ReactRouterRoute,\n      reachHistory = _a.reachHistory,\n      history = _a.history,\n      location = _a.location; // if we have React Router, use it to get the context value\n\n  if (ReactRouterRoute) {\n    return React.createElement(ReactRouterRoute, null, function (routeProps) {\n      return React.createElement(QueryParamContext.Provider, {\n        value: getContextValue(routeProps)\n      }, children);\n    });\n  } // if we are using reach router, use its history\n\n\n  if (reachHistory) {\n    return React.createElement(QueryParamContext.Provider, {\n      value: getContextValue({\n        history: adaptReachHistory(reachHistory),\n        location: location\n      })\n    }, children);\n  } // neither reach nor react-router, so allow manual overrides\n\n\n  return React.createElement(QueryParamContext.Provider, {\n    value: getContextValue({\n      history: history,\n      location: location\n    })\n  }, children);\n}\nexport default QueryParamProvider;","import { updateLocation, updateInLocation } from 'serialize-query-params';\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\n\nexport function updateUrlQuery(queryReplacements, location, history, updateType) {\n  if (updateType === void 0) {\n    updateType = 'replaceIn';\n  }\n\n  switch (updateType) {\n    case 'replaceIn':\n      history.replace(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'pushIn':\n      history.push(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'replace':\n      history.replace(updateLocation(queryReplacements, location));\n      break;\n\n    case 'push':\n      history.push(updateLocation(queryReplacements, location));\n      break;\n\n    default:\n  }\n}\nexport default updateUrlQuery;","import * as React from 'react';\nimport { parse as parseQueryString, parseUrl as parseQueryURL, stringify, StringParam } from 'serialize-query-params';\nimport { QueryParamContext } from './QueryParamProvider';\nimport { updateUrlQuery } from './updateUrlQuery';\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'replaceIn'.\n *\n * You may optionally pass in a rawQuery object, otherwise the query is derived\n * from the location available in the QueryParamContext.\n *\n * D = decoded type\n * D2 = return value from decode (typically same as D)\n */\n\nexport var useQueryParam = function useQueryParam(name, paramConfig, rawQuery) {\n  if (paramConfig === void 0) {\n    paramConfig = StringParam;\n  }\n\n  var _a = React.useContext(QueryParamContext),\n      history = _a.history,\n      location = _a.location;\n\n  if (!rawQuery) {\n    rawQuery = React.useMemo(function () {\n      var pathname = {}; // handle checking SSR (#13)\n\n      if (typeof location === 'object') {\n        // in browser\n        if (typeof window !== 'undefined') {\n          pathname = parseQueryString(location.search);\n        } else {\n          // not in browser\n          pathname = parseQueryURL(location.pathname).query;\n        }\n      }\n\n      return pathname || {};\n    }, [location.search, location.pathname]);\n  } // read in the encoded string value\n\n\n  var encodedValue = rawQuery[name]; // decode if the encoded value has changed, otherwise\n  // re-use memoized value\n\n  var decodedValue = React.useMemo(function () {\n    if (encodedValue == null) {\n      return undefined;\n    }\n\n    return paramConfig.decode(encodedValue); // note that we use the stringified encoded value since the encoded\n    // value may be an array that is recreated if a different query param\n    // changes.\n  }, [encodedValue instanceof Array ? stringify({\n    name: encodedValue\n  }) : encodedValue]); // create the setter, memoizing via useCallback\n\n  var setValue = React.useCallback(function (newValue, updateType) {\n    var _a;\n\n    var newEncodedValue = paramConfig.encode(newValue);\n    updateUrlQuery((_a = {}, _a[name] = newEncodedValue, _a), location, history, updateType);\n  }, [location]);\n  return [decodedValue, setValue];\n};","import * as React from 'react';\nimport { parse as parseQueryString, encodeQueryParams } from 'serialize-query-params';\nimport { useQueryParam } from './useQueryParam';\nimport updateUrlQuery from './updateUrlQuery';\nimport { QueryParamContext } from './QueryParamProvider';\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\n\nexport var useQueryParams = function useQueryParams(paramConfigMap) {\n  var _a = React.useContext(QueryParamContext),\n      history = _a.history,\n      location = _a.location; // read in the raw query\n\n\n  var rawQuery = React.useMemo(function () {\n    return parseQueryString(location.search) || {};\n  }, [location.search]); // parse each parameter via useQueryParam\n  // we reuse the logic to not recreate objects\n\n  var paramNames = Object.keys(paramConfigMap);\n  var paramValues = paramNames.map(function (paramName) {\n    return useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n  }); // we use a memo here to prevent recreating the containing decodedValues object\n  // which would break === comparisons even if no values changed.\n\n  var decodedValues = React.useMemo(function () {\n    // iterate over the decoded values and build an object\n    var decodedValues = {};\n\n    for (var i = 0; i < paramNames.length; ++i) {\n      decodedValues[paramNames[i]] = paramValues[i];\n    }\n\n    return decodedValues;\n  }, paramValues); // create a setter for updating multiple query params at once\n\n  var setQuery = React.useCallback(function (changes, updateType) {\n    // encode as strings for the URL\n    var encodedChanges = encodeQueryParams(paramConfigMap, changes); // update the URL\n\n    updateUrlQuery(encodedChanges, location, history, updateType);\n  }, [location]); // no longer Partial\n\n  return [decodedValues, setQuery];\n};\nexport default useQueryParams;","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as React from 'react';\nimport useQueryParams from './useQueryParams';\n/**\n * HOC to provide query parameters via props `query` and `setQuery`\n * NOTE: I couldn't get type to automatically infer generic when\n * using the format withQueryParams(config)(component), so I switched\n * to withQueryParams(config, component).\n * See: https://github.com/microsoft/TypeScript/issues/30134\n */\n\nexport function withQueryParams(paramConfigMap, WrappedComponent) {\n  // return a FC that takes props excluding query and setQuery\n  var Component = function Component(props) {\n    var _a = useQueryParams(paramConfigMap),\n        query = _a[0],\n        setQuery = _a[1]; // see https://github.com/microsoft/TypeScript/issues/28938#issuecomment-450636046 for why `...props as P`\n\n\n    return React.createElement(WrappedComponent, __assign({\n      query: query,\n      setQuery: setQuery\n    }, props));\n  };\n\n  Component.displayName = \"withQueryParams(\" + (WrappedComponent.displayName || WrappedComponent.name || 'Component') + \")\";\n  return Component;\n}\nexport default withQueryParams;","import * as React from 'react';\nimport {\n  useQueryParam,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamExample = () => {\n  const [foo, setFoo] = useQueryParam('foo', StringParam);\n  const [arr, setArr] = useQueryParam('arr', NumericArrayParam);\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamExample\">\n      <h2 className=\"text-center\">useQueryParam Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [foo, setFoo] = useQueryParam('foo', StringParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button className=\"set-btn\" onClick={() => setFoo(nextFoo)}>\n            setFoo({JSON.stringify(nextFoo)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [arr, setArr] = useQueryParam('arr', NumericArrayParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'push')}>\n            setArr({JSON.stringify(nextArr)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'pushIn')}>\n            setArr({JSON.stringify(nextArr)}, 'pushIn')\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamExample;\n","import * as React from 'react';\nimport {\n  useQueryParams,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamsExample = () => {\n  const [query, setQuery] = useQueryParams({\n    foo: StringParam,\n    arr: NumericArrayParam,\n  });\n  const { foo, arr } = query;\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamsExample\">\n      <h2 className=\"text-center\">useQueryParams Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          {`const [query, setQuery] = useQueryParams({\n  foo: StringParam,\n  arr: NumericArrayParam,\n});\nconst { foo, arr } = query;`}\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'push')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'pushIn')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'pushIn')\n          </button>\n          <p>\n            With <code>setQuery</code>, we can update multiple parameters at\n            once.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr, foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ arr: nextArr, foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamsExample;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport UseQueryParamExample from './UseQueryParamExample';\nimport UseQueryParamsExample from './UseQueryParamsExample';\nimport './App.css';\n\nconst App = (props: any) => {\n  const [example, setExample] = React.useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"text-center\">\n        <h1>useQueryParams</h1>\n        <div className=\"ext-nav\">\n          <a href=\"https://github.com/pbeshai/use-query-params\">GitHub</a>\n        </div>\n        <div className=\"nav\">\n          <button\n            className={example === 0 ? 'active' : undefined}\n            onClick={() => setExample(0)}\n          >\n            useQueryParam\n          </button>\n          <button\n            className={example === 1 ? 'active' : undefined}\n            onClick={() => setExample(1)}\n          >\n            useQueryParams\n          </button>\n        </div>\n      </header>\n      <div>\n        {example === 0 && <UseQueryParamExample />}\n        {example === 1 && <UseQueryParamsExample />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}