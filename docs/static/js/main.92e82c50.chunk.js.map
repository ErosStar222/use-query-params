{"version":3,"sources":["../../../lib/serialize.js","../../../lib/params.js","../../../lib/useQueryParam.js","../../../lib/updateUrlQuery.js","../../../lib/index.js","../../../lib/useQueryParams.js","UseQueryParamExample.tsx","UseQueryParamsExample.tsx","App.tsx","index.tsx","../../../lib/QueryParamProvider.js"],"names":["_slicedToArray","__webpack_require__","_construct","_toConsumableArray","decodeNumber","numStr","result","isNaN","encodeArray","array","entrySeparator","arguments","length","undefined","join","decodeArray","arrayStr","split","map","item","filter","encodeObject","obj","keyValSeparator","Object","keys","key","concat","decodeObject","objStr","forEach","entryStr","_entryStr$split","_entryStr$split2","value","defineProperty","exports","encodeDate","date","year","getFullYear","month","getMonth","day","getDate","decodeDate","dateString","parts","decoded","Date","getTime","encodeBoolean","bool","decodeBoolean","boolStr","encodeNumber","num","String","encodeString","str","decodeString","encodeJson","any","JSON","stringify","decodeJson","jsonStr","parse","e","encodeNumericArray","decodeNumericArray","d","encodeNumericObject","decodeNumericObject","Serialize","StringParam","encode","decode","NumberParam","ObjectParam","ArrayParam","JsonParam","DateParam","BooleanParam","NumericObjectParam","NumericArrayParam","_defineProperty","React","query_string_1","QueryParamProvider_1","params_1","updateUrlQuery_1","useQueryParam","name","paramConfig","rawQuery","_React$useContext","useContext","QueryParamContext","history","location","query","search","encodedValue","useMemo","useCallback","newValue","updateType","newEncodedValue","updateUrlQuery","filterNully","reduce","queryAccumulator","queryParam","updateLocation","newQuery","newLocation","assign","queryStr","now","mergeLocationQueryOrSearch","updateInLocation","queryReplacements","currQuery","replace","push","default","__export","m","p","hasOwnProperty","useQueryParam_1","useQueryParams_1","useQueryParams","encodeQueryParams","QueryParamProvider","paramConfigMap","encodedChanges","changingParamNames","_i","paramName","paramNames","decodedValues","_i2","changes","UseQueryParamExample","_React$useState","_React$useState2","slicedToArray","count","setCount","_useQueryParam","_useQueryParam2","zzz","setZzz","_useQueryParam3","_useQueryParam4","test","setTest","_useQueryParam5","_useQueryParam6","anyp","setAnyP","_useQueryParam7","_useQueryParam8","arr","setArr","prevArr","current","console","log","react","className","onClick","Math","floor","random","UseQueryParamsExample","_useQueryParams","_useQueryParams2","setQuery","App","props","example","setExample","Link","to","src_UseQueryParamExample","src_UseQueryParamsExample","ReactDOM","render","react_default","a","createElement","BrowserRouter","lib","ReactRouterRoute","Route","src_App_0","document","getElementById","adaptReachHistory","navigate","protocol","host","pathname","getContextValue","contextValue","window","replaceState","state","pushState","_ref","children","reachHistory","routeProps","Provider","createContext"],"mappings":"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","file":"static/js/main.92e82c50.chunk.js","sourcesContent":["\"use strict\";\n\nvar _slicedToArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _construct = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\n\nfunction encodeDate(date) {\n  if (date == null) {\n    return undefined;\n  }\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return \"\".concat(year, \"-\").concat(month < 10 ? \"0\".concat(month) : month, \"-\").concat(day < 10 ? \"0\".concat(day) : day);\n}\n\nexports.encodeDate = encodeDate;\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * @param  {String} dateString String date form like '2015-10-01'\n * @return {Date} parsed date\n */\n\nfunction decodeDate(dateString) {\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n\n  var parts = dateString.split('-'); // may only be a year so won't even have a month\n\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n\n  var decoded = _construct(Date, _toConsumableArray(parts));\n\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n\n  return decoded;\n}\n\nexports.decodeDate = decodeDate;\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\n\nfunction encodeBoolean(bool) {\n  if (bool === undefined) {\n    return undefined;\n  }\n\n  return bool ? '1' : '0';\n}\n\nexports.encodeBoolean = encodeBoolean;\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * @param {String} boolStr the encoded boolean string\n * @return {Boolean} the boolean value\n */\n\nfunction decodeBoolean(boolStr) {\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n\n  return undefined;\n}\n\nexports.decodeBoolean = decodeBoolean;\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\n\nfunction encodeNumber(num) {\n  if (num == null) {\n    return undefined;\n  }\n\n  return String(num);\n}\n\nexports.encodeNumber = encodeNumber;\n/**\n * Decodes a number from a string via parseFloat. If the number is invalid,\n * it returns undefined.\n *\n * @param {String} numStr the encoded number string\n * @return {Number} the number value\n */\n\nfunction decodeNumber(numStr) {\n  if (numStr == null || numStr === '') {\n    return undefined;\n  }\n\n  var result = +numStr;\n\n  if (isNaN(result)) {\n    return undefined;\n  }\n\n  return result;\n}\n\nexports.decodeNumber = decodeNumber;\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} string\n * @return {String} the encoded string\n */\n\nfunction encodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.encodeString = encodeString;\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * @param {String} str the encoded string\n * @return {String} the string value\n */\n\nfunction decodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.decodeString = decodeString;\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\n\nfunction encodeJson(any) {\n  if (any == null) {\n    return undefined;\n  }\n\n  return JSON.stringify(any);\n}\n\nexports.encodeJson = encodeJson;\n/**\n * Decodes a JSON string into javascript\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Any} The javascript representation\n */\n\nfunction decodeJson(jsonStr) {\n  if (!jsonStr) {\n    return undefined;\n  }\n\n  var result;\n\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n\n  return result;\n}\n\nexports.decodeJson = decodeJson;\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nfunction encodeArray(array) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (!array) {\n    return undefined;\n  }\n\n  return array.join(entrySeparator);\n}\n\nexports.encodeArray = encodeArray;\n/**\n * Decodes a JSON string into javascript array\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nfunction decodeArray(arrayStr) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (!arrayStr) {\n    return undefined;\n  }\n\n  return arrayStr.split(entrySeparator).map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n\nexports.decodeArray = decodeArray;\n/**\n * Encodes a numeric array as a JSON string. (alias of encodeArray)\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nexports.encodeNumericArray = encodeArray;\n/**\n * Decodes a JSON string into javascript array where all entries are numbers\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nfunction decodeNumericArray(arrayStr) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n  var decoded = decodeArray(arrayStr, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  }\n\n  return decoded.map(function (d) {\n    return d == null ? undefined : +d;\n  }).filter(function (d) {\n    return d !== undefined;\n  });\n}\n\nexports.decodeNumericArray = decodeNumericArray;\n/**\n * Encode simple objects as readable strings. Currently works only for simple,\n * flat objects where values are numbers, booleans or strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nfunction encodeObject(obj) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (!obj || !Object.keys(obj).length) {\n    return undefined;\n  }\n\n  return Object.keys(obj).map(function (key) {\n    return \"\".concat(key).concat(keyValSeparator).concat(obj[key]);\n  }).join(entrySeparator);\n}\n\nexports.encodeObject = encodeObject;\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are numbers, booleans or strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * @param {String} objStr The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeObject(objStr) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (!objStr || !objStr.length) {\n    return undefined;\n  }\n\n  var obj = {};\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _entryStr$split = entryStr.split(keyValSeparator),\n        _entryStr$split2 = _slicedToArray(_entryStr$split, 2),\n        key = _entryStr$split2[0],\n        value = _entryStr$split2[1];\n\n    obj[key] = value === '' ? undefined : value;\n  });\n  return obj;\n}\n\nexports.decodeObject = decodeObject;\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexports.encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * @param {String} objStr The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeNumericObject(objStr) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n  var decoded = decodeObject(objStr, keyValSeparator, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  } // convert to numbers\n\n\n  Object.keys(decoded).forEach(function (key) {\n    if (decoded[key] !== undefined) {\n      decoded[key] = decodeNumber(decoded[key]);\n    }\n  });\n  return decoded;\n}\n\nexports.decodeNumericObject = decodeNumericObject;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Serialize = require(\"./serialize\");\n/**\n * String values\n */\n\n\nexports.StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\n/**\n * Numbers (integers or floats)\n */\n\nexports.NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\n/**\n * For flat objects where values are strings\n */\n\nexports.ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\n\nexports.JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\n\nexports.DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\n\nexports.BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\n/**\n * For flat objects where the values are numbers\n */\n\nexports.NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\n\nexports.NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};","\"use strict\";\n\nvar _defineProperty = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar query_string_1 = require(\"query-string\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nvar params_1 = require(\"./params\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'replaceIn'.\n *\n * You may optionally pass in a rawQuery object, otherwise the query is derived\n * from the location available in the QueryParamContext.\n *\n * D = decoded type\n * D2 = return value from decode (typically same as D)\n */\n\n\nexports.useQueryParam = function (name) {\n  var paramConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : params_1.StringParam;\n  var rawQuery = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  if (!rawQuery) {\n    rawQuery = location.query || query_string_1.parse(location.search) || {};\n  } // read in the encoded string value\n\n\n  var encodedValue = rawQuery[name]; // decode if the encoded value has changed, otherwise re-use memoized value\n\n  var decodedValue = React.useMemo(function () {\n    return paramConfig.decode(encodedValue);\n  }, [encodedValue]); // create the setter, memoizing via useCallback\n\n  var setValue = React.useCallback(function (newValue, updateType) {\n    var newEncodedValue = paramConfig.encode(newValue);\n    updateUrlQuery_1.updateUrlQuery(_defineProperty({}, name, newEncodedValue), location, history, updateType);\n  }, [location]);\n  return [decodedValue, setValue];\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_string_1 = require(\"query-string\");\n/**\n * Mutates a location object to use the query parameters passed in\n */\n\n\nfunction mergeLocationQueryOrSearch(location, newQuery) {\n  var newLocation; // if location.query exists, update the query in location.\n  // otherwise update the search string\n\n  if (location.query) {\n    newLocation = Object.assign({}, location, {\n      query: newQuery,\n      search: ''\n    });\n  } else {\n    // replace location.search\n    var queryStr = query_string_1.stringify(newQuery);\n    var search = queryStr.length ? \"?\".concat(queryStr) : '';\n    newLocation = Object.assign({}, location, {\n      search: search\n    });\n  } // update react router key\n\n\n  newLocation.key = \"\".concat(Date.now());\n  return newLocation;\n}\n/**\n * remove query params that are nully or an empty strings.\n * note: these values are assumed to be already encoded as strings.\n */\n\n\nfunction filterNully(query) {\n  var filteredQuery = Object.keys(query).reduce(function (queryAccumulator, queryParam) {\n    // get encoded value for this param\n    var encodedValue = query[queryParam]; // if it isn't null or empty string, add it to the accumulated obj\n\n    if (encodedValue != null && encodedValue !== '') {\n      queryAccumulator[queryParam] = encodedValue;\n    }\n\n    return queryAccumulator;\n  }, {});\n  return filteredQuery;\n}\n/**\n * Update a location, wiping out parameters not included in newQuery\n */\n\n\nfunction updateLocation(newQuery, location) {\n  return mergeLocationQueryOrSearch(location, filterNully(newQuery));\n}\n/**\n * Update a location while retaining existing parameters\n */\n\n\nfunction updateInLocation(queryReplacements, location) {\n  // if a query is there, use it, otherwise parse the search string\n  var currQuery = location.query || query_string_1.parse(location.search);\n  var newQuery = Object.assign({}, currQuery, queryReplacements);\n  return updateLocation(filterNully(newQuery), location);\n}\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\n\n\nfunction updateUrlQuery(queryReplacements, location, history) {\n  var updateType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'replaceIn';\n\n  switch (updateType) {\n    case 'replaceIn':\n      history.replace(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'pushIn':\n      history.push(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'replace':\n      history.replace(updateLocation(queryReplacements, location));\n      break;\n\n    case 'push':\n      history.push(updateLocation(queryReplacements, location));\n      break;\n\n    default:\n  }\n}\n\nexports.updateUrlQuery = updateUrlQuery;\nexports.default = updateUrlQuery;","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"./serialize\"));\n\n__export(require(\"./params\"));\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nexports.useQueryParam = useQueryParam_1.useQueryParam;\n\nvar useQueryParams_1 = require(\"./useQueryParams\");\n\nexports.useQueryParams = useQueryParams_1.useQueryParams;\nexports.encodeQueryParams = useQueryParams_1.encodeQueryParams;\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nexports.QueryParamProvider = QueryParamProvider_1.QueryParamProvider;\nexports.QueryParamContext = QueryParamProvider_1.QueryParamContext;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar query_string_1 = require(\"query-string\");\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\n\n\nfunction encodeQueryParams(paramConfigMap, query) {\n  var encodedChanges = {};\n  var changingParamNames = Object.keys(query);\n\n  for (var _i = 0; _i < changingParamNames.length; _i++) {\n    var paramName = changingParamNames[_i];\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Skipping encoding parameter \".concat(paramName, \" since it was not configured.\"));\n      }\n\n      continue;\n    }\n\n    encodedChanges[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n  }\n\n  return encodedChanges;\n}\n\nexports.encodeQueryParams = encodeQueryParams;\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\n\nexports.useQueryParams = function (paramConfigMap) {\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  var rawQuery = location.query || query_string_1.parse(location.search) || {}; // parse each parameter via usQueryParam\n\n  var paramNames = Object.keys(paramConfigMap);\n  var decodedValues = {};\n\n  for (var _i2 = 0; _i2 < paramNames.length; _i2++) {\n    var paramName = paramNames[_i2];\n    decodedValues[paramName] = useQueryParam_1.useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n  } // create a setter for updating multiple query params at once\n\n\n  var setQuery = React.useCallback(function (changes, updateType) {\n    // encode as strings for the URL\n    var encodedChanges = encodeQueryParams(paramConfigMap, changes); // update the URL\n\n    updateUrlQuery_1.default(encodedChanges, location, history, updateType);\n  }, [location]); // no longer Partial\n\n  return [decodedValues, setQuery];\n};\n\nexports.default = exports.useQueryParams;","import * as React from 'react';\nimport {\n  useQueryParam,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n} from 'use-query-params';\n\nconst UseQueryParamExample = () => {\n  const [count, setCount] = React.useState(0);\n  const [zzz, setZzz] = useQueryParam('zzz', NumberParam);\n  const [test, setTest] = useQueryParam('test', StringParam);\n  const [anyp, setAnyP] = useQueryParam('anyp');\n  const [arr, setArr] = useQueryParam('arr', ArrayParam);\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  return (\n    <div className=\"UseQueryParamExample\">\n      <h2>useQueryParam Example</h2>\n      <div>\n        <button onClick={() => setCount(count + 1)}>\n          Click to change component state and cause a re-render: {count}\n        </button>\n      </div>\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <td>zzz</td>\n              <td>{zzz}</td>\n              <td>{typeof zzz}</td>\n              <td>\n                <button\n                  onClick={() => setZzz(Math.floor(Math.random() * 10000))}\n                >\n                  Change\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>test</td>\n              <td>{test}</td>\n              <td>{typeof test}</td>\n              <td>\n                <button\n                  onClick={() =>\n                    setTest('str' + Math.floor(Math.random() * 100))\n                  }\n                >\n                  Change\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>anyp</td>\n              <td>{anyp}</td>\n              <td>{typeof anyp}</td>\n              <td>\n                <button\n                  onClick={() =>\n                    setAnyP('any' + Math.floor(Math.random() * 100))\n                  }\n                >\n                  Change\n                </button>\n                <button\n                  onClick={() =>\n                    setAnyP('any' + Math.floor(Math.random() * 100), 'push')\n                  }\n                >\n                  Change Push\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>arr</td>\n              <td>{arr}</td>\n              <td>{typeof arr}</td>\n              <td>\n                <button\n                  onClick={() =>\n                    setArr([\n                      'arr' + Math.floor(Math.random() * 10),\n                      'arr' + Math.floor(Math.random() * 10),\n                    ])\n                  }\n                >\n                  Change\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamExample;\n","import * as React from 'react';\nimport { useQueryParams, StringParam, NumberParam } from 'use-query-params';\n\nconst UseQueryParamsExample = () => {\n  const [count, setCount] = React.useState(0);\n\n  const [query, setQuery] = useQueryParams({\n    zzz: NumberParam,\n    test: StringParam,\n    anyp: StringParam,\n  });\n  const { zzz, test, anyp } = query;\n\n  return (\n    <div className=\"UseQueryParamsExample\">\n      <h2>useQueryParams Example</h2>\n      <div>\n        <button onClick={() => setCount(count + 1)}>\n          Click to change component state and cause a re-render: {count}\n        </button>\n      </div>\n      <div>\n        <table>\n          <tbody>\n            <tr>\n              <td>zzz</td>\n              <td>{zzz}</td>\n              <td>{typeof zzz}</td>\n              <td>\n                <button\n                  onClick={() =>\n                    setQuery({ zzz: Math.floor(Math.random() * 10000) })\n                  }\n                >\n                  Change\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>test</td>\n              <td>{test}</td>\n              <td>{typeof test}</td>\n              <td>\n                <button\n                  onClick={() =>\n                    setQuery({ test: 'str' + Math.floor(Math.random() * 100) })\n                  }\n                >\n                  Change\n                </button>\n                <button\n                  onClick={() =>\n                    setQuery({\n                      zzz: Math.floor(Math.random() * 10000),\n                      test: 'str' + Math.floor(Math.random() * 100),\n                    })\n                  }\n                >\n                  Change test + zzz\n                </button>\n              </td>\n            </tr>\n            <tr>\n              <td>anyp</td>\n              <td>{anyp}</td>\n              <td>{typeof anyp}</td>\n              <td>\n                <button\n                  onClick={() =>\n                    setQuery({ anyp: 'any' + Math.floor(Math.random() * 100) })\n                  }\n                >\n                  Change\n                </button>\n                <button\n                  onClick={() =>\n                    setQuery(\n                      { anyp: 'any' + Math.floor(Math.random() * 100) },\n                      'push'\n                    )\n                  }\n                >\n                  Change Push\n                </button>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamsExample;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport UseQueryParamExample from './UseQueryParamExample';\nimport UseQueryParamsExample from './UseQueryParamsExample';\nimport './App.css';\n\nconst App = (props: any) => {\n  const [example, setExample] = React.useState(0);\n\n  return (\n    <div className=\"App\">\n      <h1>useQueryParams</h1>\n      <div>\n        <button onClick={() => setExample(0)}>useQueryParam Example</button>\n        <button onClick={() => setExample(1)}>useQueryParams Example</button>\n        <Link to={`/?test=${Math.floor(Math.random() * 10)}`}>\n          Push New URL\n        </Link>\n      </div>\n      <div>\n        {example === 0 && <UseQueryParamExample />}\n        {example === 1 && <UseQueryParamsExample />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { QueryParamProvider } from 'use-query-params';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n/**\n * Adapts standard DOM window history to work with our\n * { replace, push } interface.\n *\n * @param history Standard history provided by DOM\n */\n\n\nfunction adaptWindowHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.replaceState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    },\n    push: function push(location) {\n      history.pushState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    }\n  };\n}\n/**\n * Adapts @reach/router history to work with our\n * { replace, push } interface.\n *\n * @param history globalHistory from @reach/router\n */\n\n\nfunction adaptReachHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: true\n      });\n    },\n    push: function push(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: false\n      });\n    }\n  };\n}\n/**\n * Helper to produce the context value falling back to\n * window history and location if not provided.\n */\n\n\nfunction getContextValue() {\n  var contextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var value = Object.assign({}, contextValue);\n  var hasWindow = typeof window !== 'undefined';\n\n  if (hasWindow) {\n    if (!value.history) {\n      value.history = adaptWindowHistory(window.history);\n    }\n\n    if (!value.location) {\n      value.location = window.location;\n    }\n  }\n\n  return value;\n}\n\nexports.QueryParamContext = React.createContext(getContextValue());\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\n\nfunction QueryParamProvider(_ref) {\n  var children = _ref.children,\n      ReactRouterRoute = _ref.ReactRouterRoute,\n      reachHistory = _ref.reachHistory,\n      history = _ref.history,\n      location = _ref.location;\n\n  // if we have React Router, use it to get the context value\n  if (ReactRouterRoute) {\n    return React.createElement(ReactRouterRoute, null, function (routeProps) {\n      return React.createElement(exports.QueryParamContext.Provider, {\n        value: getContextValue(routeProps)\n      }, children);\n    });\n  } // if we are using reach router, use its history\n\n\n  if (reachHistory) {\n    return React.createElement(exports.QueryParamContext.Provider, {\n      value: getContextValue({\n        history: adaptReachHistory(reachHistory),\n        location: location\n      })\n    }, children);\n  } // neither reach nor react-router, so allow manual overrides\n\n\n  return React.createElement(exports.QueryParamContext.Provider, {\n    value: getContextValue({\n      history: history,\n      location: location\n    })\n  }, children);\n}\n\nexports.QueryParamProvider = QueryParamProvider;\nexports.default = QueryParamProvider;"],"sourceRoot":""}