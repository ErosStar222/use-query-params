{"version":3,"sources":["../../../lib/QueryParamProvider.js","../../../lib/serialize.js","../../../lib/params.js","../../../lib/useQueryParam.js","../../../lib/updateUrlQuery.js","UseQueryParamExample.tsx","UseQueryParamsExample.tsx","App.tsx","index.tsx","../../../lib/index.js","../../../lib/useQueryParams.js"],"names":["Object","defineProperty","exports","value","React","__webpack_require__","adaptReachHistory","history","replace","location","navigate","concat","protocol","host","pathname","search","push","getContextValue","contextValue","arguments","length","undefined","assign","window","replaceState","state","pushState","QueryParamProvider","_ref","children","ReactRouterRoute","reachHistory","createElement","routeProps","QueryParamContext","Provider","createContext","default","_slicedToArray","_construct","_toConsumableArray","decodeNumber","numStr","result","isNaN","encodeArray","array","entrySeparator","join","decodeArray","arrayStr","split","map","item","filter","encodeObject","obj","keyValSeparator","keys","key","decodeObject","objStr","forEach","entryStr","_entryStr$split","_entryStr$split2","encodeDate","date","year","getFullYear","month","getMonth","day","getDate","decodeDate","dateString","parts","decoded","Date","getTime","encodeBoolean","bool","decodeBoolean","boolStr","encodeNumber","num","String","encodeString","str","decodeString","encodeJson","any","JSON","stringify","decodeJson","jsonStr","parse","e","encodeNumericArray","decodeNumericArray","d","encodeNumericObject","decodeNumericObject","Serialize","StringParam","encode","decode","NumberParam","ObjectParam","ArrayParam","JsonParam","DateParam","BooleanParam","NumericObjectParam","NumericArrayParam","_defineProperty","query_string_1","QueryParamProvider_1","params_1","updateUrlQuery_1","useQueryParam","name","paramConfig","rawQuery","_React$useContext","useContext","query","encodedValue","useMemo","useCallback","newValue","updateType","newEncodedValue","updateUrlQuery","filterNully","reduce","queryAccumulator","queryParam","updateLocation","newQuery","newLocation","queryStr","now","mergeLocationQueryOrSearch","updateInLocation","queryReplacements","currQuery","UseQueryParamExample","_useQueryParam","_useQueryParam2","slicedToArray","foo","setFoo","_useQueryParam3","_useQueryParam4","arr","setArr","prevArr","current","console","log","nextFoo","nanoid","nextArr","Math","round","random","react","className","default_highlight","language","style","atomOneLight","onClick","UseQueryParamsExample","_useQueryParams","useQueryParams","_useQueryParams2","setQuery","App","props","_React$useState","_React$useState2","example","setExample","href","src_UseQueryParamExample","src_UseQueryParamsExample","ReactDOM","render","react_default","a","BrowserRouter","lib","Route","src_App_0","document","getElementById","__export","m","p","hasOwnProperty","useQueryParam_1","useQueryParams_1","encodeQueryParams","paramConfigMap","encodedChanges","changingParamNames","_i","paramName","paramNames","decodedValues","_i2","changes"],"mappings":"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","file":"static/js/main.0ad740fe.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n/**\n * Adapts standard DOM window history to work with our\n * { replace, push } interface.\n *\n * @param history Standard history provided by DOM\n */\n\n\nfunction adaptWindowHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.replaceState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    },\n    push: function push(location) {\n      history.pushState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    }\n  };\n}\n/**\n * Adapts @reach/router history to work with our\n * { replace, push } interface.\n *\n * @param history globalHistory from @reach/router\n */\n\n\nfunction adaptReachHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: true\n      });\n    },\n    push: function push(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: false\n      });\n    }\n  };\n}\n/**\n * Helper to produce the context value falling back to\n * window history and location if not provided.\n */\n\n\nfunction getContextValue() {\n  var contextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var value = Object.assign({}, contextValue);\n  var hasWindow = typeof window !== 'undefined';\n\n  if (hasWindow) {\n    if (!value.history) {\n      value.history = adaptWindowHistory(window.history);\n    }\n\n    if (!value.location) {\n      value.location = window.location;\n    }\n  }\n\n  return value;\n}\n\nexports.QueryParamContext = React.createContext(getContextValue());\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\n\nfunction QueryParamProvider(_ref) {\n  var children = _ref.children,\n      ReactRouterRoute = _ref.ReactRouterRoute,\n      reachHistory = _ref.reachHistory,\n      history = _ref.history,\n      location = _ref.location;\n\n  // if we have React Router, use it to get the context value\n  if (ReactRouterRoute) {\n    return React.createElement(ReactRouterRoute, null, function (routeProps) {\n      return React.createElement(exports.QueryParamContext.Provider, {\n        value: getContextValue(routeProps)\n      }, children);\n    });\n  } // if we are using reach router, use its history\n\n\n  if (reachHistory) {\n    return React.createElement(exports.QueryParamContext.Provider, {\n      value: getContextValue({\n        history: adaptReachHistory(reachHistory),\n        location: location\n      })\n    }, children);\n  } // neither reach nor react-router, so allow manual overrides\n\n\n  return React.createElement(exports.QueryParamContext.Provider, {\n    value: getContextValue({\n      history: history,\n      location: location\n    })\n  }, children);\n}\n\nexports.QueryParamProvider = QueryParamProvider;\nexports.default = QueryParamProvider;","\"use strict\";\n\nvar _slicedToArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _construct = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\n\nfunction encodeDate(date) {\n  if (date == null) {\n    return undefined;\n  }\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return \"\".concat(year, \"-\").concat(month < 10 ? \"0\".concat(month) : month, \"-\").concat(day < 10 ? \"0\".concat(day) : day);\n}\n\nexports.encodeDate = encodeDate;\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * @param  {String} dateString String date form like '2015-10-01'\n * @return {Date} parsed date\n */\n\nfunction decodeDate(dateString) {\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n\n  var parts = dateString.split('-'); // may only be a year so won't even have a month\n\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n\n  var decoded = _construct(Date, _toConsumableArray(parts));\n\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n\n  return decoded;\n}\n\nexports.decodeDate = decodeDate;\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\n\nfunction encodeBoolean(bool) {\n  if (bool === undefined) {\n    return undefined;\n  }\n\n  return bool ? '1' : '0';\n}\n\nexports.encodeBoolean = encodeBoolean;\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * @param {String} boolStr the encoded boolean string\n * @return {Boolean} the boolean value\n */\n\nfunction decodeBoolean(boolStr) {\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n\n  return undefined;\n}\n\nexports.decodeBoolean = decodeBoolean;\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\n\nfunction encodeNumber(num) {\n  if (num == null) {\n    return undefined;\n  }\n\n  return String(num);\n}\n\nexports.encodeNumber = encodeNumber;\n/**\n * Decodes a number from a string via parseFloat. If the number is invalid,\n * it returns undefined.\n *\n * @param {String} numStr the encoded number string\n * @return {Number} the number value\n */\n\nfunction decodeNumber(numStr) {\n  if (numStr == null || numStr === '') {\n    return undefined;\n  }\n\n  var result = +numStr;\n\n  if (isNaN(result)) {\n    return undefined;\n  }\n\n  return result;\n}\n\nexports.decodeNumber = decodeNumber;\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} string\n * @return {String} the encoded string\n */\n\nfunction encodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.encodeString = encodeString;\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * @param {String} str the encoded string\n * @return {String} the string value\n */\n\nfunction decodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.decodeString = decodeString;\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\n\nfunction encodeJson(any) {\n  if (any == null) {\n    return undefined;\n  }\n\n  return JSON.stringify(any);\n}\n\nexports.encodeJson = encodeJson;\n/**\n * Decodes a JSON string into javascript\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Any} The javascript representation\n */\n\nfunction decodeJson(jsonStr) {\n  if (!jsonStr) {\n    return undefined;\n  }\n\n  var result;\n\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n\n  return result;\n}\n\nexports.decodeJson = decodeJson;\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nfunction encodeArray(array) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (!array) {\n    return undefined;\n  }\n\n  return array.join(entrySeparator);\n}\n\nexports.encodeArray = encodeArray;\n/**\n * Decodes a JSON string into javascript array\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nfunction decodeArray(arrayStr) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (!arrayStr) {\n    return undefined;\n  }\n\n  return arrayStr.split(entrySeparator).map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n\nexports.decodeArray = decodeArray;\n/**\n * Encodes a numeric array as a JSON string. (alias of encodeArray)\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nexports.encodeNumericArray = encodeArray;\n/**\n * Decodes a JSON string into javascript array where all entries are numbers\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nfunction decodeNumericArray(arrayStr) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n  var decoded = decodeArray(arrayStr, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  }\n\n  return decoded.map(function (d) {\n    return d == null ? undefined : +d;\n  }).filter(function (d) {\n    return d !== undefined;\n  });\n}\n\nexports.decodeNumericArray = decodeNumericArray;\n/**\n * Encode simple objects as readable strings. Currently works only for simple,\n * flat objects where values are numbers, booleans or strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nfunction encodeObject(obj) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (!obj || !Object.keys(obj).length) {\n    return undefined;\n  }\n\n  return Object.keys(obj).map(function (key) {\n    return \"\".concat(key).concat(keyValSeparator).concat(obj[key]);\n  }).join(entrySeparator);\n}\n\nexports.encodeObject = encodeObject;\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are numbers, booleans or strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * @param {String} objStr The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeObject(objStr) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (!objStr || !objStr.length) {\n    return undefined;\n  }\n\n  var obj = {};\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _entryStr$split = entryStr.split(keyValSeparator),\n        _entryStr$split2 = _slicedToArray(_entryStr$split, 2),\n        key = _entryStr$split2[0],\n        value = _entryStr$split2[1];\n\n    obj[key] = value === '' ? undefined : value;\n  });\n  return obj;\n}\n\nexports.decodeObject = decodeObject;\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexports.encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * @param {String} objStr The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeNumericObject(objStr) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n  var decoded = decodeObject(objStr, keyValSeparator, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  } // convert to numbers\n\n\n  Object.keys(decoded).forEach(function (key) {\n    if (decoded[key] !== undefined) {\n      decoded[key] = decodeNumber(decoded[key]);\n    }\n  });\n  return decoded;\n}\n\nexports.decodeNumericObject = decodeNumericObject;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Serialize = require(\"./serialize\");\n/**\n * String values\n */\n\n\nexports.StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\n/**\n * Numbers (integers or floats)\n */\n\nexports.NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\n/**\n * For flat objects where values are strings\n */\n\nexports.ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\n\nexports.JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\n\nexports.DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\n\nexports.BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\n/**\n * For flat objects where the values are numbers\n */\n\nexports.NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\n\nexports.NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};","\"use strict\";\n\nvar _defineProperty = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar query_string_1 = require(\"query-string\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nvar params_1 = require(\"./params\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'replaceIn'.\n *\n * You may optionally pass in a rawQuery object, otherwise the query is derived\n * from the location available in the QueryParamContext.\n *\n * D = decoded type\n * D2 = return value from decode (typically same as D)\n */\n\n\nexports.useQueryParam = function (name) {\n  var paramConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : params_1.StringParam;\n  var rawQuery = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  if (!rawQuery) {\n    rawQuery = location.query || query_string_1.parse(location.search) || {};\n  } // read in the encoded string value\n\n\n  var encodedValue = rawQuery[name]; // decode if the encoded value has changed, otherwise re-use memoized value\n\n  var decodedValue = React.useMemo(function () {\n    return paramConfig.decode(encodedValue);\n  }, [encodedValue]); // create the setter, memoizing via useCallback\n\n  var setValue = React.useCallback(function (newValue, updateType) {\n    var newEncodedValue = paramConfig.encode(newValue);\n    updateUrlQuery_1.updateUrlQuery(_defineProperty({}, name, newEncodedValue), location, history, updateType);\n  }, [location]);\n  return [decodedValue, setValue];\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_string_1 = require(\"query-string\");\n/**\n * Mutates a location object to use the query parameters passed in\n */\n\n\nfunction mergeLocationQueryOrSearch(location, newQuery) {\n  var newLocation; // if location.query exists, update the query in location.\n  // otherwise update the search string\n\n  if (location.query) {\n    newLocation = Object.assign({}, location, {\n      query: newQuery,\n      search: ''\n    });\n  } else {\n    // replace location.search\n    var queryStr = query_string_1.stringify(newQuery);\n    var search = queryStr.length ? \"?\".concat(queryStr) : '';\n    newLocation = Object.assign({}, location, {\n      search: search\n    });\n  } // update react router key\n\n\n  newLocation.key = \"\".concat(Date.now());\n  return newLocation;\n}\n/**\n * remove query params that are nully or an empty strings.\n * note: these values are assumed to be already encoded as strings.\n */\n\n\nfunction filterNully(query) {\n  var filteredQuery = Object.keys(query).reduce(function (queryAccumulator, queryParam) {\n    // get encoded value for this param\n    var encodedValue = query[queryParam]; // if it isn't null or empty string, add it to the accumulated obj\n\n    if (encodedValue != null && encodedValue !== '') {\n      queryAccumulator[queryParam] = encodedValue;\n    }\n\n    return queryAccumulator;\n  }, {});\n  return filteredQuery;\n}\n/**\n * Update a location, wiping out parameters not included in newQuery\n */\n\n\nfunction updateLocation(newQuery, location) {\n  return mergeLocationQueryOrSearch(location, filterNully(newQuery));\n}\n/**\n * Update a location while retaining existing parameters\n */\n\n\nfunction updateInLocation(queryReplacements, location) {\n  // if a query is there, use it, otherwise parse the search string\n  var currQuery = location.query || query_string_1.parse(location.search);\n  var newQuery = Object.assign({}, currQuery, queryReplacements);\n  return updateLocation(filterNully(newQuery), location);\n}\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\n\n\nfunction updateUrlQuery(queryReplacements, location, history) {\n  var updateType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'replaceIn';\n\n  switch (updateType) {\n    case 'replaceIn':\n      history.replace(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'pushIn':\n      history.push(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'replace':\n      history.replace(updateLocation(queryReplacements, location));\n      break;\n\n    case 'push':\n      history.push(updateLocation(queryReplacements, location));\n      break;\n\n    default:\n  }\n}\n\nexports.updateUrlQuery = updateUrlQuery;\nexports.default = updateUrlQuery;","import * as React from 'react';\nimport {\n  useQueryParam,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamExample = () => {\n  const [foo, setFoo] = useQueryParam('foo', StringParam);\n  const [arr, setArr] = useQueryParam('arr', NumericArrayParam);\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamExample\">\n      <h2 className=\"text-center\">useQueryParam Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [foo, setFoo] = useQueryParam('foo', StringParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button className=\"set-btn\" onClick={() => setFoo(nextFoo)}>\n            setFoo({JSON.stringify(nextFoo)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [arr, setArr] = useQueryParam('arr', NumericArrayParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'push')}>\n            setArr({JSON.stringify(nextArr)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'pushIn')}>\n            setArr({JSON.stringify(nextArr)}, 'pushIn')\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamExample;\n","import * as React from 'react';\nimport {\n  useQueryParams,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamsExample = () => {\n  const [query, setQuery] = useQueryParams({\n    foo: StringParam,\n    arr: NumericArrayParam,\n  });\n  const { foo, arr } = query;\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamsExample\">\n      <h2 className=\"text-center\">useQueryParams Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          {`const [query, setQuery] = useQueryParams({\n  foo: StringParam,\n  arr: NumericArrayParam,\n});\nconst { foo, arr } = query;`}\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'push')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'pushIn')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'pushIn')\n          </button>\n          <p>\n            With <code>setQuery</code>, we can update multiple parameters at\n            once.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr, foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ arr: nextArr, foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamsExample;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport UseQueryParamExample from './UseQueryParamExample';\nimport UseQueryParamsExample from './UseQueryParamsExample';\nimport './App.css';\n\nconst App = (props: any) => {\n  const [example, setExample] = React.useState(1);\n\n  return (\n    <div className=\"App\">\n      <header className=\"text-center\">\n        <h1>useQueryParams</h1>\n        <div className=\"ext-nav\">\n          <a href=\"https://github.com/pbeshai/use-query-params\">GitHub</a>\n        </div>\n        <div className=\"nav\">\n          <button\n            className={example === 0 ? 'active' : undefined}\n            onClick={() => setExample(0)}\n          >\n            useQueryParam\n          </button>\n          <button\n            className={example === 1 ? 'active' : undefined}\n            onClick={() => setExample(1)}\n          >\n            useQueryParams\n          </button>\n        </div>\n      </header>\n      <div>\n        {example === 0 && <UseQueryParamExample />}\n        {example === 1 && <UseQueryParamsExample />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"./serialize\"));\n\n__export(require(\"./params\"));\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nexports.useQueryParam = useQueryParam_1.useQueryParam;\n\nvar useQueryParams_1 = require(\"./useQueryParams\");\n\nexports.useQueryParams = useQueryParams_1.useQueryParams;\nexports.encodeQueryParams = useQueryParams_1.encodeQueryParams;\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nexports.QueryParamProvider = QueryParamProvider_1.QueryParamProvider;\nexports.QueryParamContext = QueryParamProvider_1.QueryParamContext;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar query_string_1 = require(\"query-string\");\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\n\n\nfunction encodeQueryParams(paramConfigMap, query) {\n  var encodedChanges = {};\n  var changingParamNames = Object.keys(query);\n\n  for (var _i = 0; _i < changingParamNames.length; _i++) {\n    var paramName = changingParamNames[_i];\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Skipping encoding parameter \".concat(paramName, \" since it was not configured.\"));\n      }\n\n      continue;\n    }\n\n    encodedChanges[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n  }\n\n  return encodedChanges;\n}\n\nexports.encodeQueryParams = encodeQueryParams;\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\n\nexports.useQueryParams = function (paramConfigMap) {\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  var rawQuery = location.query || query_string_1.parse(location.search) || {}; // parse each parameter via usQueryParam\n\n  var paramNames = Object.keys(paramConfigMap);\n  var decodedValues = {};\n\n  for (var _i2 = 0; _i2 < paramNames.length; _i2++) {\n    var paramName = paramNames[_i2];\n    decodedValues[paramName] = useQueryParam_1.useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n  } // create a setter for updating multiple query params at once\n\n\n  var setQuery = React.useCallback(function (changes, updateType) {\n    // encode as strings for the URL\n    var encodedChanges = encodeQueryParams(paramConfigMap, changes); // update the URL\n\n    updateUrlQuery_1.default(encodedChanges, location, history, updateType);\n  }, [location]); // no longer Partial\n\n  return [decodedValues, setQuery];\n};\n\nexports.default = exports.useQueryParams;"],"sourceRoot":""}