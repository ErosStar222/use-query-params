{"version":3,"sources":["../../../lib/QueryParamProvider.js","../../../lib/serialize.js","../../../lib/params.js","../../../lib/useQueryParam.js","../../../lib/updateUrlQuery.js","UseQueryParamExample.tsx","UseQueryParamsExample.tsx","App.tsx","index.tsx","../../../lib/index.js","../../../lib/useQueryParams.js"],"names":["Object","defineProperty","exports","value","React","__webpack_require__","adaptReachHistory","history","replace","location","navigate","concat","protocol","host","pathname","search","push","getContextValue","contextValue","arguments","length","undefined","assign","window","replaceState","state","pushState","QueryParamProvider","_ref","children","ReactRouterRoute","reachHistory","createElement","routeProps","QueryParamContext","Provider","createContext","default","_slicedToArray","_construct","_toConsumableArray","decodeNumber","input","numStr","Array","result","isNaN","decodeArray","map","item","filter","encodeDelimitedArray","array","entrySeparator","join","decodeDelimitedArray","arrayStr","split","encodeObject","obj","keyValSeparator","keys","key","decodeObject","objStr","forEach","entryStr","_entryStr$split","_entryStr$split2","encodeDate","date","year","getFullYear","month","getMonth","day","getDate","decodeDate","dateString","parts","decoded","Date","getTime","encodeBoolean","bool","decodeBoolean","boolStr","encodeNumber","num","String","encodeString","str","decodeString","encodeJson","any","JSON","stringify","decodeJson","jsonStr","parse","e","encodeArray","encodeNumericArray","d","decodeNumericArray","arr","encodeDelimitedNumericArray","decodeDelimitedNumericArray","encodeNumericObject","decodeNumericObject","Serialize","StringParam","encode","decode","NumberParam","ObjectParam","ArrayParam","NumericArrayParam","JsonParam","DateParam","BooleanParam","NumericObjectParam","DelimitedArrayParam","DelimitedNumericArrayParam","_defineProperty","query_string_1","QueryParamProvider_1","params_1","updateUrlQuery_1","useQueryParam","name","paramConfig","rawQuery","_React$useContext","useContext","useMemo","query","encodedValue","useCallback","newValue","updateType","newEncodedValue","updateUrlQuery","filterNully","reduce","queryAccumulator","queryParam","updateLocation","newQuery","newLocation","queryStr","now","mergeLocationQueryOrSearch","updateInLocation","queryReplacements","currQuery","UseQueryParamExample","_useQueryParam","_useQueryParam2","slicedToArray","foo","setFoo","_useQueryParam3","_useQueryParam4","setArr","prevArr","current","console","log","nextFoo","nanoid","nextArr","Math","round","random","react","className","default_highlight","language","style","atomOneLight","onClick","UseQueryParamsExample","_useQueryParams","useQueryParams","_useQueryParams2","setQuery","App","props","_React$useState","_React$useState2","example","setExample","href","src_UseQueryParamExample","src_UseQueryParamsExample","ReactDOM","render","react_default","a","BrowserRouter","lib","Route","src_App_0","document","getElementById","__export","m","p","hasOwnProperty","useQueryParam_1","useQueryParams_1","encodeQueryParams","paramConfigMap","encodedChanges","changingParamNames","_i","paramName","paramNames","decodedValues","_i2","changes"],"mappings":"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","file":"static/js/main.04df9ca6.chunk.js","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n/**\n * Adapts standard DOM window history to work with our\n * { replace, push } interface.\n *\n * @param history Standard history provided by DOM\n */\n\n\nfunction adaptWindowHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.replaceState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    },\n    push: function push(location) {\n      history.pushState(location.state, '', \"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search));\n    }\n  };\n}\n/**\n * Adapts @reach/router history to work with our\n * { replace, push } interface.\n *\n * @param history globalHistory from @reach/router\n */\n\n\nfunction adaptReachHistory(history) {\n  return {\n    replace: function replace(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: true\n      });\n    },\n    push: function push(location) {\n      history.navigate(\"\".concat(location.protocol, \"//\").concat(location.host).concat(location.pathname).concat(location.search), {\n        replace: false\n      });\n    }\n  };\n}\n/**\n * Helper to produce the context value falling back to\n * window history and location if not provided.\n */\n\n\nfunction getContextValue() {\n  var contextValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var value = Object.assign({}, contextValue);\n  var hasWindow = typeof window !== 'undefined';\n\n  if (hasWindow) {\n    if (!value.history) {\n      value.history = adaptWindowHistory(window.history);\n    }\n\n    if (!value.location) {\n      value.location = window.location;\n    }\n  }\n\n  return value;\n}\n\nexports.QueryParamContext = React.createContext(getContextValue());\n/**\n * Context provider for query params to have access to the\n * active routing system, enabling updates to the URL.\n */\n\nfunction QueryParamProvider(_ref) {\n  var children = _ref.children,\n      ReactRouterRoute = _ref.ReactRouterRoute,\n      reachHistory = _ref.reachHistory,\n      history = _ref.history,\n      location = _ref.location;\n\n  // if we have React Router, use it to get the context value\n  if (ReactRouterRoute) {\n    return React.createElement(ReactRouterRoute, null, function (routeProps) {\n      return React.createElement(exports.QueryParamContext.Provider, {\n        value: getContextValue(routeProps)\n      }, children);\n    });\n  } // if we are using reach router, use its history\n\n\n  if (reachHistory) {\n    return React.createElement(exports.QueryParamContext.Provider, {\n      value: getContextValue({\n        history: adaptReachHistory(reachHistory),\n        location: location\n      })\n    }, children);\n  } // neither reach nor react-router, so allow manual overrides\n\n\n  return React.createElement(exports.QueryParamContext.Provider, {\n    value: getContextValue({\n      history: history,\n      location: location\n    })\n  }, children);\n}\n\nexports.QueryParamProvider = QueryParamProvider;\nexports.default = QueryParamProvider;","\"use strict\";\n\nvar _slicedToArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _construct = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/construct\");\n\nvar _toConsumableArray = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\n\nfunction encodeDate(date) {\n  if (date == null) {\n    return undefined;\n  }\n\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return \"\".concat(year, \"-\").concat(month < 10 ? \"0\".concat(month) : month, \"-\").concat(day < 10 ? \"0\".concat(day) : day);\n}\n\nexports.encodeDate = encodeDate;\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\n\nfunction decodeDate(input) {\n  if (input == null || !input.length) {\n    return undefined;\n  }\n\n  var dateString = input instanceof Array ? input[0] : input;\n\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n\n  var parts = dateString.split('-'); // may only be a year so won't even have a month\n\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n\n  var decoded = _construct(Date, _toConsumableArray(parts));\n\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n\n  return decoded;\n}\n\nexports.decodeDate = decodeDate;\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\n\nfunction encodeBoolean(bool) {\n  if (bool === undefined) {\n    return undefined;\n  }\n\n  return bool ? '1' : '0';\n}\n\nexports.encodeBoolean = encodeBoolean;\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\n\nfunction decodeBoolean(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var boolStr = input instanceof Array ? input[0] : input;\n\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n\n  return undefined;\n}\n\nexports.decodeBoolean = decodeBoolean;\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\n\nfunction encodeNumber(num) {\n  if (num == null) {\n    return undefined;\n  }\n\n  return String(num);\n}\n\nexports.encodeNumber = encodeNumber;\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\n\nfunction decodeNumber(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var numStr = input instanceof Array ? input[0] : input;\n\n  if (numStr == null || numStr === '') {\n    return undefined;\n  }\n\n  var result = +numStr;\n\n  if (isNaN(result)) {\n    return undefined;\n  }\n\n  return result;\n}\n\nexports.decodeNumber = decodeNumber;\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\n\nfunction encodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.encodeString = encodeString;\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\n\nfunction decodeString(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var str = input instanceof Array ? input[0] : input;\n\n  if (str == null) {\n    return undefined;\n  }\n\n  return String(str);\n}\n\nexports.decodeString = decodeString;\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\n\nfunction encodeJson(any) {\n  if (any == null) {\n    return undefined;\n  }\n\n  return JSON.stringify(any);\n}\n\nexports.encodeJson = encodeJson;\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\n\nfunction decodeJson(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var jsonStr = input instanceof Array ? input[0] : input;\n\n  if (!jsonStr) {\n    return undefined;\n  }\n\n  var result;\n\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n\n  return result;\n}\n\nexports.decodeJson = decodeJson;\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nfunction encodeArray(array) {\n  if (!array) {\n    return undefined;\n  }\n\n  return array;\n}\n\nexports.encodeArray = encodeArray;\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nfunction decodeArray(input) {\n  if (!input) {\n    return undefined;\n  }\n\n  if (!(input instanceof Array)) {\n    return [input];\n  }\n\n  return input.map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n\nexports.decodeArray = decodeArray;\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\n\nfunction encodeNumericArray(array) {\n  if (!array) {\n    return undefined;\n  }\n\n  return array.map(function (d) {\n    return \"\".concat(d);\n  });\n}\n\nexports.encodeNumericArray = encodeNumericArray;\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\n\nfunction decodeNumericArray(input) {\n  var arr = decodeArray(input);\n\n  if (!arr) {\n    return undefined;\n  }\n\n  return arr.map(function (item) {\n    return +item;\n  }).filter(function (item) {\n    return item !== undefined && !isNaN(item);\n  });\n}\n\nexports.decodeNumericArray = decodeNumericArray;\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\n\nfunction encodeDelimitedArray(array) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (!array) {\n    return undefined;\n  }\n\n  return array.join(entrySeparator);\n}\n\nexports.encodeDelimitedArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\n\nfunction decodeDelimitedArray(input) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n\n  if (input == null) {\n    return undefined;\n  }\n\n  var arrayStr = input instanceof Array ? input[0] : input;\n\n  if (!arrayStr) {\n    return undefined;\n  }\n\n  return arrayStr.split(entrySeparator).map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n\nexports.decodeDelimitedArray = decodeDelimitedArray;\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\n\nexports.encodeDelimitedNumericArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\n\nfunction decodeDelimitedNumericArray(arrayStr) {\n  var entrySeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '_';\n  var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  }\n\n  return decoded.map(function (d) {\n    return d == null ? undefined : +d;\n  }).filter(function (d) {\n    return d !== undefined && !isNaN(d);\n  });\n}\n\nexports.decodeDelimitedNumericArray = decodeDelimitedNumericArray;\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nfunction encodeObject(obj) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (!obj || !Object.keys(obj).length) {\n    return undefined;\n  }\n\n  return Object.keys(obj).map(function (key) {\n    return \"\".concat(key).concat(keyValSeparator).concat(obj[key]);\n  }).join(entrySeparator);\n}\n\nexports.encodeObject = encodeObject;\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeObject(input) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n\n  if (input == null) {\n    return undefined;\n  }\n\n  var objStr = input instanceof Array ? input[0] : input;\n\n  if (!objStr || !objStr.length) {\n    return undefined;\n  }\n\n  var obj = {};\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _entryStr$split = entryStr.split(keyValSeparator),\n        _entryStr$split2 = _slicedToArray(_entryStr$split, 2),\n        key = _entryStr$split2[0],\n        value = _entryStr$split2[1];\n\n    obj[key] = value === '' ? undefined : value;\n  });\n  return obj;\n}\n\nexports.decodeObject = decodeObject;\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\n\nexports.encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\n\nfunction decodeNumericObject(input) {\n  var keyValSeparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '-';\n  var entrySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '_';\n  var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n\n  if (!decoded) {\n    return undefined;\n  } // convert to numbers\n\n\n  Object.keys(decoded).forEach(function (key) {\n    if (decoded[key] !== undefined) {\n      decoded[key] = decodeNumber(decoded[key]);\n    }\n  });\n  return decoded;\n}\n\nexports.decodeNumericObject = decodeNumericObject;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Serialize = require(\"./serialize\");\n/**\n * String values\n */\n\n\nexports.StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\n/**\n * Numbers (integers or floats)\n */\n\nexports.NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\n/**\n * For flat objects where values are strings\n */\n\nexports.ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\n\nexports.JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\n\nexports.DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\n\nexports.BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\n/**\n * For flat objects where the values are numbers\n */\n\nexports.NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\n\nexports.DelimitedArrayParam = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\n\nexports.DelimitedNumericArrayParam = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray\n};","\"use strict\";\n\nvar _defineProperty = require(\"/Users/pbeshai/Workspace/pbeshai/use-query-params/examples/website-example/node_modules/@babel/runtime/helpers/defineProperty\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar query_string_1 = require(\"query-string\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nvar params_1 = require(\"./params\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n/**\n * Given a query param name and query parameter configuration ({ encode, decode })\n * return the decoded value and a setter for updating it.\n *\n * The setter takes two arguments (newValue, updateType) where updateType\n * is one of 'replace' | 'replaceIn' | 'push' | 'pushIn', defaulting to\n * 'replaceIn'.\n *\n * You may optionally pass in a rawQuery object, otherwise the query is derived\n * from the location available in the QueryParamContext.\n *\n * D = decoded type\n * D2 = return value from decode (typically same as D)\n */\n\n\nexports.useQueryParam = function (name) {\n  var paramConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : params_1.StringParam;\n  var rawQuery = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  if (!rawQuery) {\n    rawQuery = React.useMemo(function () {\n      return location.query || query_string_1.parse(location.search) || {};\n    }, [location.query, location.search]);\n  } // read in the encoded string value\n\n\n  var encodedValue = rawQuery[name]; // decode if the encoded value has changed, otherwise\n  // re-use memoized value\n\n  var decodedValue = React.useMemo(function () {\n    if (encodedValue == null) {\n      return undefined;\n    }\n\n    return paramConfig.decode(encodedValue); // note that we use the stringified encoded value since the encoded\n    // value may be an array that is recreated if a different query param\n    // changes.\n  }, [encodedValue instanceof Array ? query_string_1.stringify({\n    name: encodedValue\n  }) : encodedValue]); // create the setter, memoizing via useCallback\n\n  var setValue = React.useCallback(function (newValue, updateType) {\n    var newEncodedValue = paramConfig.encode(newValue);\n    updateUrlQuery_1.updateUrlQuery(_defineProperty({}, name, newEncodedValue), location, history, updateType);\n  }, [location]);\n  return [decodedValue, setValue];\n};","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar query_string_1 = require(\"query-string\");\n/**\n * Mutates a location object to use the query parameters passed in\n */\n\n\nfunction mergeLocationQueryOrSearch(location, newQuery) {\n  var newLocation; // if location.query exists, update the query in location.\n  // otherwise update the search string\n\n  if (location.query) {\n    newLocation = Object.assign({}, location, {\n      query: newQuery,\n      search: ''\n    });\n  } else {\n    // replace location.search\n    var queryStr = query_string_1.stringify(newQuery);\n    var search = queryStr.length ? \"?\".concat(queryStr) : '';\n    newLocation = Object.assign({}, location, {\n      search: search\n    });\n  } // update react router key\n\n\n  newLocation.key = \"\".concat(Date.now());\n  return newLocation;\n}\n/**\n * remove query params that are nully or an empty strings.\n * note: these values are assumed to be already encoded as strings.\n */\n\n\nfunction filterNully(query) {\n  var filteredQuery = Object.keys(query).reduce(function (queryAccumulator, queryParam) {\n    // get encoded value for this param\n    var encodedValue = query[queryParam]; // if it isn't null or empty string, add it to the accumulated obj\n\n    if (encodedValue != null && encodedValue !== '') {\n      queryAccumulator[queryParam] = encodedValue;\n    }\n\n    return queryAccumulator;\n  }, {});\n  return filteredQuery;\n}\n/**\n * Update a location, wiping out parameters not included in newQuery\n */\n\n\nfunction updateLocation(newQuery, location) {\n  return mergeLocationQueryOrSearch(location, filterNully(newQuery));\n}\n/**\n * Update a location while retaining existing parameters\n */\n\n\nfunction updateInLocation(queryReplacements, location) {\n  // if a query is there, use it, otherwise parse the search string\n  var currQuery = location.query || query_string_1.parse(location.search);\n  var newQuery = Object.assign({}, currQuery, queryReplacements);\n  return updateLocation(filterNully(newQuery), location);\n}\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\n\n\nfunction updateUrlQuery(queryReplacements, location, history) {\n  var updateType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'replaceIn';\n\n  switch (updateType) {\n    case 'replaceIn':\n      history.replace(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'pushIn':\n      history.push(updateInLocation(queryReplacements, location));\n      break;\n\n    case 'replace':\n      history.replace(updateLocation(queryReplacements, location));\n      break;\n\n    case 'push':\n      history.push(updateLocation(queryReplacements, location));\n      break;\n\n    default:\n  }\n}\n\nexports.updateUrlQuery = updateUrlQuery;\nexports.default = updateUrlQuery;","import * as React from 'react';\nimport {\n  useQueryParam,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamExample = () => {\n  const [foo, setFoo] = useQueryParam('foo', StringParam);\n  const [arr, setArr] = useQueryParam('arr', NumericArrayParam);\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamExample\">\n      <h2 className=\"text-center\">useQueryParam Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [foo, setFoo] = useQueryParam('foo', StringParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button className=\"set-btn\" onClick={() => setFoo(nextFoo)}>\n            setFoo({JSON.stringify(nextFoo)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          const [arr, setArr] = useQueryParam('arr', NumericArrayParam)\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'push')}>\n            setArr({JSON.stringify(nextArr)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button className=\"set-btn\" onClick={() => setArr(nextArr, 'pushIn')}>\n            setArr({JSON.stringify(nextArr)}, 'pushIn')\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamExample;\n","import * as React from 'react';\nimport {\n  useQueryParams,\n  StringParam,\n  NumberParam,\n  ArrayParam,\n  NumericArrayParam,\n} from 'use-query-params';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneLight } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport nanoid from 'nanoid';\n\nconst UseQueryParamsExample = () => {\n  const [query, setQuery] = useQueryParams({\n    foo: StringParam,\n    arr: NumericArrayParam,\n  });\n  const { foo, arr } = query;\n\n  // verify we aren't creating new arrays each time\n  const prevArr = React.useRef(arr);\n  React.useEffect(() => {\n    if (prevArr.current !== arr) {\n      console.log('new array. was:', prevArr.current, 'now:', arr);\n    } else {\n      console.log('same array');\n    }\n    prevArr.current = arr;\n  });\n\n  const nextFoo = nanoid(4);\n  const nextArr = [\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n    Math.round(Math.random() * 100),\n  ];\n\n  return (\n    <div className=\"UseQueryParamsExample\">\n      <h2 className=\"text-center\">useQueryParams Example</h2>\n      <div className=\"example-block\">\n        <SyntaxHighlighter language=\"javascript\" style={atomOneLight}>\n          {`const [query, setQuery] = useQueryParams({\n  foo: StringParam,\n  arr: NumericArrayParam,\n});\nconst { foo, arr } = query;`}\n        </SyntaxHighlighter>\n        <div>\n          The value of <b>foo</b> is{' '}\n          <code>{foo === undefined ? 'undefined' : JSON.stringify(foo)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n      <div className=\"example-block\">\n        <div>\n          The value of <b>arr</b> is{' '}\n          <code>{arr === undefined ? 'undefined' : JSON.stringify(arr)}</code>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'push')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'push')\n          </button>\n          <p>\n            Since we specify the update type as <code>push</code>, the back\n            button will work. If we used <code>pushIn</code>, the value of{' '}\n            <b>foo</b> would be retained.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr }, 'pushIn')}\n          >\n            setQuery({JSON.stringify({ arr: nextArr }, null, 2)}, 'pushIn')\n          </button>\n          <p>\n            With <code>setQuery</code>, we can update multiple parameters at\n            once.\n          </p>\n          <button\n            className=\"set-btn\"\n            onClick={() => setQuery({ arr: nextArr, foo: nextFoo })}\n          >\n            setQuery({JSON.stringify({ arr: nextArr, foo: nextFoo }, null, 2)})\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default UseQueryParamsExample;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport UseQueryParamExample from './UseQueryParamExample';\nimport UseQueryParamsExample from './UseQueryParamsExample';\nimport './App.css';\n\nconst App = (props: any) => {\n  const [example, setExample] = React.useState(0);\n\n  return (\n    <div className=\"App\">\n      <header className=\"text-center\">\n        <h1>useQueryParams</h1>\n        <div className=\"ext-nav\">\n          <a href=\"https://github.com/pbeshai/use-query-params\">GitHub</a>\n        </div>\n        <div className=\"nav\">\n          <button\n            className={example === 0 ? 'active' : undefined}\n            onClick={() => setExample(0)}\n          >\n            useQueryParam\n          </button>\n          <button\n            className={example === 1 ? 'active' : undefined}\n            onClick={() => setExample(1)}\n          >\n            useQueryParams\n          </button>\n        </div>\n      </header>\n      <div>\n        {example === 0 && <UseQueryParamExample />}\n        {example === 1 && <UseQueryParamsExample />}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { QueryParamProvider } from 'use-query-params';\nimport './index.css';\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n);\n","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\n__export(require(\"./serialize\"));\n\n__export(require(\"./params\"));\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nexports.useQueryParam = useQueryParam_1.useQueryParam;\n\nvar useQueryParams_1 = require(\"./useQueryParams\");\n\nexports.useQueryParams = useQueryParams_1.useQueryParams;\nexports.encodeQueryParams = useQueryParams_1.encodeQueryParams;\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n\nexports.QueryParamProvider = QueryParamProvider_1.QueryParamProvider;\nexports.QueryParamContext = QueryParamProvider_1.QueryParamContext;","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar query_string_1 = require(\"query-string\");\n\nvar useQueryParam_1 = require(\"./useQueryParam\");\n\nvar updateUrlQuery_1 = require(\"./updateUrlQuery\");\n\nvar QueryParamProvider_1 = require(\"./QueryParamProvider\");\n/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\n\n\nfunction encodeQueryParams(paramConfigMap, query) {\n  var encodedChanges = {};\n  var changingParamNames = Object.keys(query);\n\n  for (var _i = 0; _i < changingParamNames.length; _i++) {\n    var paramName = changingParamNames[_i];\n\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Skipping encoding parameter \".concat(paramName, \" since it was not configured.\"));\n      }\n\n      continue;\n    }\n\n    encodedChanges[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n  }\n\n  return encodedChanges;\n}\n\nexports.encodeQueryParams = encodeQueryParams;\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\n\nexports.useQueryParams = function (paramConfigMap) {\n  var _React$useContext = React.useContext(QueryParamProvider_1.QueryParamContext),\n      history = _React$useContext.history,\n      location = _React$useContext.location; // read in the raw query\n\n\n  var rawQuery = React.useMemo(function () {\n    return location.query || query_string_1.parse(location.search) || {};\n  }, [location.query, location.search]); // parse each parameter via usQueryParam\n\n  var paramNames = Object.keys(paramConfigMap);\n  var decodedValues = {};\n\n  for (var _i2 = 0; _i2 < paramNames.length; _i2++) {\n    var paramName = paramNames[_i2];\n    decodedValues[paramName] = useQueryParam_1.useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n  } // create a setter for updating multiple query params at once\n\n\n  var setQuery = React.useCallback(function (changes, updateType) {\n    // encode as strings for the URL\n    var encodedChanges = encodeQueryParams(paramConfigMap, changes); // update the URL\n\n    updateUrlQuery_1.default(encodedChanges, location, history, updateType);\n  }, [location]); // no longer Partial\n\n  return [decodedValues, setQuery];\n};\n\nexports.default = exports.useQueryParams;"],"sourceRoot":""}